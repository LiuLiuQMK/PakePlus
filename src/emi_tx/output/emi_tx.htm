<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\output\emi_tx.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\output\emi_tx.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6140002: Last Updated: Tue Aug 27 20:34:27 2024
<BR><P>
<H3>Maximum Stack Usage =        608 bytes + Unknown(Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
queue_recv_msg &rArr; idle_process &rArr; custom_main_loop &rArr; ucm_loop &rArr; emi_loop &rArr; emi_start_process &rArr; emi_star_a_test &rArr; start_test_dif_case &rArr; start_sweep_tx_v4 &rArr; EMI_Timer_Start &rArr; TMR_GetClk &rArr; SYSCTRL_GetClk &rArr; SYSCTRL_GetPClk &rArr; SYSCTRL_GetHClk &rArr; SYSCTRL_GetPLLClk &rArr; __aeabi_uldivmod
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[30]">EMI_on_hci_cmd_complete_start_test</a> from ctrl_emi.o(.text.EMI_on_hci_cmd_complete_start_test) referenced 4 times from ctrl_emi.o(.data.emi_cmd_cmpl_handler_map)
 <LI><a href="#[31]">EMI_on_hci_cmd_complete_stop_test</a> from ctrl_emi.o(.text.EMI_on_hci_cmd_complete_stop_test) referenced from ctrl_emi.o(.data.emi_cmd_cmpl_handler_map)
 <LI><a href="#[5]">IAP_APP_recv_cmd_callback</a> from iap_application.o(.text.IAP_APP_recv_cmd_callback) referenced 2 times from iap_application.o(.text.IAP_Application_Init)
 <LI><a href="#[7]">IAP_DoUpdate_Delay_Timeout_Callback</a> from iap_application.o(.text.IAP_DoUpdate_Delay_Timeout_Callback) referenced 2 times from iap_application.o(.text.IAP_CMD_SwitchApp_handler)
 <LI><a href="#[6]">IAP_Reboot_Delay_Timeout_Callback</a> from iap_application.o(.text.IAP_Reboot_Delay_Timeout_Callback) referenced 2 times from iap_application.o(.text.IAP_CMD_Reboot_handler)
 <LI><a href="#[0]">Reset_Handler</a> from startup_ing91600.o(.text) referenced from startup_ing91600.o(RESET)
 <LI><a href="#[4]">TIMER1_IrqHandler</a> from ctrl_emi.o(.text.TIMER1_IrqHandler) referenced 2 times from ctrl_emi.o(.text.EMI_Timer_Init)
 <LI><a href="#[2]">__scatterload</a> from init.o(.text) referenced from startup_ing91600.o(.text)
 <LI><a href="#[15]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[3]">app_main</a> from main.o(.text.app_main) referenced from startup_ing91600.o(.text)
 <LI><a href="#[b]">att_read_callback</a> from profile.o(.text.att_read_callback) referenced 2 times from profile.o(.text.setup_profile)
 <LI><a href="#[c]">att_write_callback</a> from profile.o(.text.att_write_callback) referenced 2 times from profile.o(.text.setup_profile)
 <LI><a href="#[8]">bsp_spi_iap_recv_callback</a> from iap_transport.o(.text.bsp_spi_iap_recv_callback) referenced 2 times from iap_transport.o(.text.IAP_Transport_Init)
 <LI><a href="#[14]">bsp_usb_hid_ucm_recv_callback</a> from ctrl.o(.text.bsp_usb_hid_ucm_recv_callback) referenced 2 times from ctrl.o(.text.ucm_init)
 <LI><a href="#[2c]">cb_assertion</a> from main.o(.text.cb_assertion) referenced from main.o(.rodata.evt_cb_table)
 <LI><a href="#[2b]">cb_hard_fault</a> from main.o(.text.cb_hard_fault) referenced from main.o(.rodata.evt_cb_table)
 <LI><a href="#[2e]">cb_heap_out_of_mem</a> from main.o(.text.cb_heap_out_of_mem) referenced from main.o(.rodata.evt_cb_table)
 <LI><a href="#[29]">cb_putc</a> from main.o(.text.cb_putc) referenced from main.o(.rodata.evt_cb_table)
 <LI><a href="#[2f]">cb_trace_rtt</a> from trace.o(.text.cb_trace_rtt) referenced from main.o(.rodata.evt_cb_table)
 <LI><a href="#[e]">custom_sweep_24g_carrier_task</a> from ctrl_emi.o(.text.custom_sweep_24g_carrier_task) referenced 2 times from ctrl_emi.o(.text.start_custom_sweep_24g_carrier)
 <LI><a href="#[f]">custom_sweep_24g_tx_v4_task</a> from ctrl_emi.o(.text.custom_sweep_24g_tx_v4_task) referenced 2 times from ctrl_emi.o(.text.start_custom_sweep_24g_tx_v4)
 <LI><a href="#[10]">custom_sweep_tx_v4_task</a> from ctrl_emi.o(.text.custom_sweep_tx_v4_task) referenced 2 times from ctrl_emi.o(.text.start_custom_sweep_tx_v4)
 <LI><a href="#[1e]">dummy_event_create</a> from noos_impl.o(.text.dummy_event_create) referenced from noos_impl.o(.rodata.driver)
 <LI><a href="#[20]">dummy_event_set</a> from noos_impl.o(.text.dummy_event_set) referenced from noos_impl.o(.rodata.driver)
 <LI><a href="#[1f]">dummy_event_wait</a> from noos_impl.o(.text.dummy_event_wait) referenced from noos_impl.o(.rodata.driver)
 <LI><a href="#[23]">enter_critical</a> from noos_impl.o(.text.enter_critical) referenced from noos_impl.o(.rodata.driver)
 <LI><a href="#[22]">free</a> from malloc.o(i.free) referenced from noos_impl.o(.rodata.driver)
 <LI><a href="#[24]">leave_critical</a> from noos_impl.o(.text.leave_critical) referenced from noos_impl.o(.rodata.driver)
 <LI><a href="#[1]">main</a> from startup_ing91600.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[21]">malloc</a> from malloc.o(i.malloc) referenced from noos_impl.o(.rodata.driver)
 <LI><a href="#[25]">noos_start</a> from noos_impl.o(.text.noos_start) referenced from noos_impl.o(.rodata.driver)
 <LI><a href="#[2d]">on_lle_init</a> from main.o(.text.on_lle_init) referenced from main.o(.rodata.evt_cb_table)
 <LI><a href="#[28]">pendsv_isr</a> from noos_impl.o(.text.pendsv_isr) referenced from noos_impl.o(.rodata.driver)
 <LI><a href="#[9]">peripherals_spi_isr</a> from spi_spi1_read_write_with_dma.o(.text.peripherals_spi_isr) referenced 2 times from spi_spi1_read_write_with_dma.o(.text.bsp_spi_iap_init)
 <LI><a href="#[a]">puts</a> from puts.o(i.puts) referenced 2 times from main.o(.text.cb_assertion)
 <LI><a href="#[a]">puts</a> from puts.o(i.puts) referenced 2 times from main.o(.text.cb_hard_fault)
 <LI><a href="#[a]">puts</a> from puts.o(i.puts) referenced 2 times from main.o(.text.cb_heap_out_of_mem)
 <LI><a href="#[1b]">queue_create</a> from noos_impl.o(.text.queue_create) referenced from noos_impl.o(.rodata.driver)
 <LI><a href="#[1d]">queue_recv_msg</a> from noos_impl.o(.text.queue_recv_msg) referenced from noos_impl.o(.rodata.driver)
 <LI><a href="#[1c]">queue_send_msg</a> from noos_impl.o(.text.queue_send_msg) referenced from noos_impl.o(.rodata.driver)
 <LI><a href="#[2a]">setup_profile</a> from profile.o(.text.setup_profile) referenced from main.o(.rodata.evt_cb_table)
 <LI><a href="#[27]">svc_isr</a> from noos_impl.o(.text.svc_isr) referenced from noos_impl.o(.rodata.driver)
 <LI><a href="#[11]">sweep_carrier_task</a> from ctrl_emi.o(.text.sweep_carrier_task) referenced 2 times from ctrl_emi.o(.text.start_sweep_carrier)
 <LI><a href="#[12]">sweep_tx_v4_task</a> from ctrl_emi.o(.text.sweep_tx_v4_task) referenced 2 times from ctrl_emi.o(.text.start_sweep_tx_v4)
 <LI><a href="#[1a]">task_create</a> from noos_impl.o(.text.task_create) referenced from noos_impl.o(.rodata.driver)
 <LI><a href="#[26]">tick_isr</a> from noos_impl.o(.text.tick_isr) referenced from noos_impl.o(.rodata.driver)
 <LI><a href="#[32]">timer_cb_0</a> from noos_impl.o(.text.timer_cb_0) referenced from noos_impl.o(.data.sw_timers)
 <LI><a href="#[33]">timer_cb_1</a> from noos_impl.o(.text.timer_cb_1) referenced from noos_impl.o(.data.sw_timers)
 <LI><a href="#[34]">timer_cb_2</a> from noos_impl.o(.text.timer_cb_2) referenced from noos_impl.o(.data.sw_timers)
 <LI><a href="#[35]">timer_cb_3</a> from noos_impl.o(.text.timer_cb_3) referenced from noos_impl.o(.data.sw_timers)
 <LI><a href="#[36]">timer_cb_4</a> from noos_impl.o(.text.timer_cb_4) referenced from noos_impl.o(.data.sw_timers)
 <LI><a href="#[37]">timer_cb_5</a> from noos_impl.o(.text.timer_cb_5) referenced from noos_impl.o(.data.sw_timers)
 <LI><a href="#[38]">timer_cb_6</a> from noos_impl.o(.text.timer_cb_6) referenced from noos_impl.o(.data.sw_timers)
 <LI><a href="#[39]">timer_cb_7</a> from noos_impl.o(.text.timer_cb_7) referenced from noos_impl.o(.data.sw_timers)
 <LI><a href="#[16]">timer_create</a> from noos_impl.o(.text.timer_create) referenced from noos_impl.o(.rodata.driver)
 <LI><a href="#[19]">timer_delete</a> from noos_impl.o(.text.timer_delete) referenced from noos_impl.o(.rodata.driver)
 <LI><a href="#[17]">timer_start</a> from noos_impl.o(.text.timer_start) referenced from noos_impl.o(.rodata.driver)
 <LI><a href="#[18]">timer_stop</a> from noos_impl.o(.text.timer_stop) referenced from noos_impl.o(.rodata.driver)
 <LI><a href="#[13]">trace_full_dump2</a> from trace.o(.text.trace_full_dump2) referenced 2 times from trace.o(.text.trace_full_dump2)
 <LI><a href="#[d]">user_packet_handler</a> from profile.o(.text.user_packet_handler) referenced 2 times from profile.o(.text.setup_profile)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[127]"></a>att_server_init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_profile
</UL>

<P><STRONG><a name="[129]"></a>att_server_register_packet_handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_profile
</UL>

<P><STRONG><a name="[12f]"></a>gap_rx_test_v2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_rx_v2
</UL>

<P><STRONG><a name="[109]"></a>gap_test_end</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emi_test_stop_hci_test
</UL>

<P><STRONG><a name="[135]"></a>gap_tx_test_v4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_test_dif_case
</UL>

<P><STRONG><a name="[108]"></a>gap_vendor_tx_continuous_wave</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_test_dif_case
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_cw
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emi_test_stop_hci_test
</UL>

<P><STRONG><a name="[128]"></a>hci_add_event_handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_profile
</UL>

<P><STRONG><a name="[d8]"></a>platform_config</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[7a]"></a>platform_create_us_timer</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CMD_SwitchApp_handler
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CMD_Reboot_handler
</UL>

<P><STRONG><a name="[ea]"></a>platform_get_gen_os_driver</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_trace_rtt
</UL>

<P><STRONG><a name="[79]"></a>platform_get_us_time</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emi_loop
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CMD_SwitchApp_handler
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CMD_Reboot_handler
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emi_test_set_timeout
</UL>

<P><STRONG><a name="[56]"></a>platform_printf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emi_loop
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMI_Dispatch
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_modify_usb_info_result
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usb_hid_ucm_recv_callback
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UCM_Packaging_Dispatch
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UCM_Command_Dispatch_Modify_USB_Info
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Transport_Dispatch
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_TransportCheckBCC
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isCheckHeaderValid
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsBlockInfoValid
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAppCrcValid
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Header_Check
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Flash_Write
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Flash_Erase
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_DoUpdate_Delay_Timeout_Callback
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CMD_SwitchApp_handler
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CMD_Start_handler
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CMD_Reboot_handler
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CMD_FlashWrite_handler
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CMD_FlashRead_handler
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_APP_recv_cmd_callback
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_APP_cmd_dispatch
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_APP_AddPayloadData
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_running_task_flag
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sweep_tx_v4_task
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sweep_carrier_task
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_tx_v4
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_test_dif_case
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_sweep_tx_v4
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_sweep_carrier
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_rx_v2
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_cw
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_custom_sweep_tx_v4
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_custom_sweep_24g_tx_v4
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_custom_sweep_24g_carrier
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iteration_dif_case
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emi_stop_process
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emi_stop_a_test
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emi_start_process
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emi_star_a_test
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emi_forward_process
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_sweep_tx_v4_task
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_sweep_24g_tx_v4_task
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_sweep_24g_carrier_task
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_tx_power
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_payload_model
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usb_send_success
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usb_send_failed
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMI_on_hci_cmd_complete_stop_test
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_profile
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Init
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_heap_out_of_mem
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_hard_fault
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_assertion
</UL>

<P><STRONG><a name="[137]"></a>platform_raise_assertion</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_create
</UL>

<P><STRONG><a name="[81]"></a>platform_reset</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Reboot_Delay_Timeout_Callback
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_DoUpdate_Delay_Timeout_Callback
</UL>

<P><STRONG><a name="[d9]"></a>platform_set_evt_callback_table</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[59]"></a>platform_set_irq_callback</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMI_Timer_Init
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spi_iap_init
</UL>

<P><STRONG><a name="[138]"></a>platform_set_timer</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_delete
</UL>

<P><STRONG><a name="[3a]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))

<P><STRONG><a name="[14a]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[3b]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[3c]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[14b]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[14c]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[14d]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[14e]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[14f]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, startup_ing91600.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ing91600.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>main</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, startup_ing91600.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[2]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ing91600.o(.text)
</UL>
<P><STRONG><a name="[150]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[3d]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_GetPLLClk
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ConfigPLLClk
</UL>

<P><STRONG><a name="[151]"></a>___aeabi_memcpy4$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[152]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[67]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spi_ucm_send
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UCM_Packaging_Dispatch
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteNoCheck
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteBlocking
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_TransportAttachData
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Transport_send_single_pack
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_APP_AddPayloadData
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_peripherals_spi_module
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spi_iap_send
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_send_msg
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_recv_msg
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_flash_security0
</UL>

<P><STRONG><a name="[122]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_recv_msg
</UL>

<P><STRONG><a name="[153]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[154]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[41]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[155]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[156]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[40]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spi_ucm_send
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Transport_Send_Dummy
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CtlInit
</UL>

<P><STRONG><a name="[157]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[158]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[42]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[84]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Header_Check
</UL>

<P><STRONG><a name="[85]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Header_Check
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash
</UL>

<P><STRONG><a name="[cd]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>

<P><STRONG><a name="[43]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>

<P><STRONG><a name="[47]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[48]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[49]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[159]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[149]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[3f]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[15a]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[3e]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[15b]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[44]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[15c]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[15d]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[46]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[45]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>

<P><STRONG><a name="[4a]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[4b]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[146]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[117]"></a>DMA_EnableChannel</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, peripheral_dma.o(.text.DMA_EnableChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA_EnableChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripherals_spi_rxfifo_to_dma
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripherals_spi_dma_to_txfifo
</UL>

<P><STRONG><a name="[50]"></a>DMA_PrepareMem2Peripheral</STRONG> (Thumb, 254 bytes, Stack size 72 bytes, peripheral_dma.o(.text.DMA_PrepareMem2Peripheral))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = DMA_PrepareMem2Peripheral &rArr; DMA_GetCtrlConfigDst
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetPeripheralWidth
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetPeripheralDataAddr
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCtrlConfigDst
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_GetDmaId
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripherals_spi_dma_to_txfifo
</UL>

<P><STRONG><a name="[53]"></a>DMA_PreparePeripheral2Mem</STRONG> (Thumb, 254 bytes, Stack size 72 bytes, peripheral_dma.o(.text.DMA_PreparePeripheral2Mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = DMA_PreparePeripheral2Mem &rArr; DMA_GetCtrlConfigSrc
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetPeripheralWidth
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetPeripheralDataAddr
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCtrlConfigSrc
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_GetDmaId
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripherals_spi_rxfifo_to_dma
</UL>

<P><STRONG><a name="[e0]"></a>DMA_Reset</STRONG> (Thumb, 58 bytes, Stack size 4 bytes, peripheral_dma.o(.text.DMA_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = DMA_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spi_iap_init
</UL>

<P><STRONG><a name="[55]"></a>EMI_Dispatch</STRONG> (Thumb, 1456 bytes, Stack size 208 bytes, ctrl_emi.o(.text.EMI_Dispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = EMI_Dispatch &rArr; inqueue_request
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inqueue_request
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usb_hid_ucm_recv_callback
</UL>

<P><STRONG><a name="[58]"></a>EMI_Timer_Init</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, ctrl_emi.o(.text.EMI_Timer_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = EMI_Timer_Init &rArr; SYSCTRL_ClearClkGateMulti &rArr; SYSCTRL_ClearClkGate &rArr; SYSCTRL_ClkGateCtrl &rArr; set_reg_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SetOpMode
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_IntEnable
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_set_irq_callback
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ClearClkGateMulti
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emi_init
</UL>

<P><STRONG><a name="[5d]"></a>EMI_Timer_Start</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, ctrl_emi.o(.text.EMI_Timer_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = EMI_Timer_Start &rArr; TMR_GetClk &rArr; SYSCTRL_GetClk &rArr; SYSCTRL_GetPClk &rArr; SYSCTRL_GetHClk &rArr; SYSCTRL_GetPLLClk &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SetReload
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_PauseEnable
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_GetClk
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_sweep_tx_v4
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_sweep_carrier
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_custom_sweep_tx_v4
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_custom_sweep_24g_tx_v4
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_custom_sweep_24g_carrier
</UL>

<P><STRONG><a name="[62]"></a>EMI_Timer_Stop</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ctrl_emi.o(.text.EMI_Timer_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = EMI_Timer_Stop &rArr; TMR_PauseEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_PauseEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emi_loop
</UL>

<P><STRONG><a name="[64]"></a>GIO_SetDirection</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, peripheral_gpio.o(.text.GIO_SetDirection))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = GIO_SetDirection &rArr; GIO_MaskedWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO_MaskedWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_peripherals
</UL>

<P><STRONG><a name="[e6]"></a>GIO_WriteValue</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, peripheral_gpio.o(.text.GIO_WriteValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GIO_WriteValue
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usb_send_success
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usb_send_failed
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripherals_spi_isr
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_peripherals
</UL>

<P><STRONG><a name="[74]"></a>IAP_Application_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, iap_application.o(.text.IAP_Application_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IAP_Application_Init &rArr; IAP_Transport_recv_cmd_callback_register
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Transport_recv_cmd_callback_register
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Init
</UL>

<P><STRONG><a name="[69]"></a>IAP_GetAppBuffer</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, iap_application.o(.text.IAP_GetAppBuffer))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_TransportClearRecvData
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_APP_PreparePayloadDataStart
</UL>

<P><STRONG><a name="[8c]"></a>IAP_Init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, iap_916.o(.text.IAP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IAP_Init &rArr; IAP_Transport_Init &rArr; IAP_TransportRecvGotoIdle &rArr; IAP_TransportClearRecvData
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Transport_Init
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Application_Init
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_peripherals
</UL>

<P><STRONG><a name="[8d]"></a>IAP_Transport_Init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, iap_transport.o(.text.IAP_Transport_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IAP_Transport_Init &rArr; IAP_TransportRecvGotoIdle &rArr; IAP_TransportClearRecvData
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_TransportRecvGotoIdle
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_TransportClearRecvData
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spi_iap_recv_callback_register
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Init
</UL>

<P><STRONG><a name="[75]"></a>IAP_Transport_recv_cmd_callback_register</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, iap_transport.o(.text.IAP_Transport_recv_cmd_callback_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = IAP_Transport_recv_cmd_callback_register
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Application_Init
</UL>

<P><STRONG><a name="[6c]"></a>IAP_Transport_send_single_pack</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, iap_transport.o(.text.IAP_Transport_send_single_pack))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = IAP_Transport_send_single_pack &rArr; bsp_spi_iap_send &rArr; peripherals_spi_push_data &rArr; peripherals_spi_dma_to_txfifo &rArr; DMA_PrepareMem2Peripheral &rArr; DMA_GetCtrlConfigDst
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_TransportGetBCC
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spi_iap_send
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_APP_SendACK
</UL>

<P><STRONG><a name="[a4]"></a>LLE_RF_INI</STRONG> (Thumb, 222 bytes, Stack size 8 bytes, test_emi.o(.text.LLE_RF_INI))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LLE_RF_INI
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFTestTx
</UL>

<P><STRONG><a name="[98]"></a>LLE_SPI_WRITE</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, test_emi.o(.text.LLE_SPI_WRITE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LLE_SPI_WRITE &rArr; nop
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nop
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFTestTx
</UL>

<P><STRONG><a name="[a5]"></a>LLE_TESTMODE_TX</STRONG> (Thumb, 724 bytes, Stack size 24 bytes, test_emi.o(.text.LLE_TESTMODE_TX))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LLE_TESTMODE_TX
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFTestTx
</UL>

<P><STRONG><a name="[9a]"></a>LLE_TX_STOP</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, test_emi.o(.text.LLE_TX_STOP))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LLE_TX_STOP &rArr; ing2p4g_rst &rArr; nop
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing2p4g_rst
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emi_test_stop_hci_test
</UL>

<P><STRONG><a name="[125]"></a>PINCTRL_Pull</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, peripheral_pinctrl.o(.text.PINCTRL_Pull))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PINCTRL_Pull
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_peripherals_spi_pin
</UL>

<P><STRONG><a name="[a1]"></a>PINCTRL_SelSpiPins</STRONG> (Thumb, 400 bytes, Stack size 72 bytes, peripheral_pinctrl.o(.text.PINCTRL_SelSpiPins))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = PINCTRL_SelSpiPins &rArr; PINCTRL_SelSpiIn0 &rArr; PINCTRL_SelInput &rArr; PINCTRL_SetPadMux &rArr; set_reg_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINCTRL_SetPadMux
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINCTRL_SelSpiIn0
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_peripherals_spi_pin
</UL>

<P><STRONG><a name="[9f]"></a>PINCTRL_SetPadMux</STRONG> (Thumb, 438 bytes, Stack size 32 bytes, peripheral_pinctrl.o(.text.PINCTRL_SetPadMux))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = PINCTRL_SetPadMux &rArr; set_reg_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;source_id_on_pin
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_reg_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_peripherals_spi_pin
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_peripherals
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINCTRL_SelSpiPins
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINCTRL_SelInput
</UL>

<P><STRONG><a name="[4d]"></a>PWM_GetMode</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, peripheral_pwm.o(.text.PWM_GetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = PWM_GetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetPeripheralDataAddr
</UL>

<P><STRONG><a name="[a3]"></a>RFTestTx</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, test_emi.o(.text.RFTestTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RFTestTx &rArr; ing2p4g_rst &rArr; nop
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nop
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing2p4g_rst
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLE_TESTMODE_TX
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLE_SPI_WRITE
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLE_RF_INI
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_tx_v4
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_test_dif_case
</UL>

<P><STRONG><a name="[a6]"></a>SEGGER_RTT_GetAvailWriteSpace</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, trace.o(.text.SEGGER_RTT_GetAvailWriteSpace))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SEGGER_RTT_GetAvailWriteSpace &rArr; _GetAvailWriteSpace
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetAvailWriteSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_trace_rtt
</UL>

<P><STRONG><a name="[a8]"></a>SEGGER_RTT_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, trace.o(.text.SEGGER_RTT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SEGGER_RTT_Init &rArr; _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_rtt_init
</UL>

<P><STRONG><a name="[aa]"></a>SEGGER_RTT_Write</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, trace.o(.text.SEGGER_RTT_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_trace_rtt
</UL>

<P><STRONG><a name="[ab]"></a>SEGGER_RTT_WriteNoLock</STRONG> (Thumb, 178 bytes, Stack size 48 bytes, trace.o(.text.SEGGER_RTT_WriteNoLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteNoCheck
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteBlocking
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetAvailWriteSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>

<P><STRONG><a name="[b1]"></a>SYSCTRL_ClearClkGate</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, peripheral_sysctrl.o(.text.SYSCTRL_ClearClkGate))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SYSCTRL_ClearClkGate &rArr; SYSCTRL_ClkGateCtrl &rArr; set_reg_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ClkGateCtrl
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ClearClkGateMulti
</UL>

<P><STRONG><a name="[5a]"></a>SYSCTRL_ClearClkGateMulti</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, peripheral_sysctrl.o(.text.SYSCTRL_ClearClkGateMulti))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SYSCTRL_ClearClkGateMulti &rArr; SYSCTRL_ClearClkGate &rArr; SYSCTRL_ClkGateCtrl &rArr; set_reg_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ClearClkGate
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMI_Timer_Init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_peripherals_spi_pin
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_peripherals
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spi_iap_init
</UL>

<P><STRONG><a name="[b3]"></a>SYSCTRL_ConfigBOR</STRONG> (Thumb, 204 bytes, Stack size 40 bytes, peripheral_sysctrl.o(.text.SYSCTRL_ConfigBOR))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SYSCTRL_ConfigBOR &rArr; set_reg_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_reg_bits
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_reg_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[b4]"></a>SYSCTRL_ConfigPLLClk</STRONG> (Thumb, 356 bytes, Stack size 48 bytes, peripheral_sysctrl.o(.text.SYSCTRL_ConfigPLLClk))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SYSCTRL_ConfigPLLClk &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_GetSlowClk
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[b6]"></a>SYSCTRL_GetAdcClkDiv</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, peripheral_sysctrl.o(.text.SYSCTRL_GetAdcClkDiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SYSCTRL_GetAdcClkDiv &rArr; SYSCTRL_GetSlowClk
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_GetSlowClk
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_GetClk
</UL>

<P><STRONG><a name="[b7]"></a>SYSCTRL_GetCLK32k</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, peripheral_sysctrl.o(.text.SYSCTRL_GetCLK32k))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SYSCTRL_GetCLK32k &rArr; SYSCTRL_GetSlowClk
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_GetSlowClk
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_GetClk
</UL>

<P><STRONG><a name="[b8]"></a>SYSCTRL_GetClk</STRONG> (Thumb, 680 bytes, Stack size 64 bytes, peripheral_sysctrl.o(.text.SYSCTRL_GetClk))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SYSCTRL_GetClk &rArr; SYSCTRL_GetPClk &rArr; SYSCTRL_GetHClk &rArr; SYSCTRL_GetPLLClk &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_GetSlowClk
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_GetPLLClk
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_GetPClk
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_GetCLK32k
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_GetAdcClkDiv
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_safe_divider6
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_safe_divider10
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_safe_divider
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_GetHClk
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_GetClk
</UL>

<P><STRONG><a name="[51]"></a>SYSCTRL_GetDmaId</STRONG> (Thumb, 136 bytes, Stack size 20 bytes, peripheral_sysctrl.o(.text.SYSCTRL_GetDmaId))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SYSCTRL_GetDmaId
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_PreparePeripheral2Mem
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_PrepareMem2Peripheral
</UL>

<P><STRONG><a name="[bc]"></a>SYSCTRL_GetHClk</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, peripheral_sysctrl.o(.text.SYSCTRL_GetHClk))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SYSCTRL_GetHClk &rArr; SYSCTRL_GetPLLClk &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_GetSlowClk
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_GetPLLClk
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_safe_divider
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_GetPClk
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_GetClk
</UL>

<P><STRONG><a name="[be]"></a>SYSCTRL_GetPClk</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, peripheral_sysctrl.o(.text.SYSCTRL_GetPClk))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SYSCTRL_GetPClk &rArr; SYSCTRL_GetHClk &rArr; SYSCTRL_GetPLLClk &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_safe_divider
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_GetHClk
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_GetClk
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_GetClk
</UL>

<P><STRONG><a name="[bb]"></a>SYSCTRL_GetPLLClk</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, peripheral_sysctrl.o(.text.SYSCTRL_GetPLLClk))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SYSCTRL_GetPLLClk &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_GetSlowClk
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_GetHClk
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_GetClk
</UL>

<P><STRONG><a name="[b5]"></a>SYSCTRL_GetSlowClk</STRONG> (Thumb, 164 bytes, Stack size 12 bytes, peripheral_sysctrl.o(.text.SYSCTRL_GetSlowClk))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SYSCTRL_GetSlowClk
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_GetPLLClk
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_GetCLK32k
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_GetAdcClkDiv
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_GetHClk
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ConfigPLLClk
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_GetClk
</UL>

<P><STRONG><a name="[bf]"></a>SYSCTRL_ICacheControl</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, peripheral_sysctrl.o(.text.SYSCTRL_ICacheControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SYSCTRL_ICacheControl &rArr; SYSCTRL_CacheControl0 &rArr; set_reg_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_CacheControl0
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_flash_security
</UL>

<P><STRONG><a name="[c0]"></a>SYSCTRL_Init</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, peripheral_sysctrl.o(.text.SYSCTRL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = SYSCTRL_Init &rArr; flash_get_factory_calib_data &rArr; flash_prepare_factory_data &rArr; copy_security_data &rArr; read_flash_security &rArr; SYSCTRL_ICacheControl &rArr; SYSCTRL_CacheControl0 &rArr; set_reg_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_SetLDOOutput
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_reg_bits
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_get_factory_calib_data
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[c3]"></a>SYSCTRL_SelectHClk</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, peripheral_sysctrl.o(.text.SYSCTRL_SelectHClk))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SYSCTRL_SelectHClk &rArr; set_reg_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_reg_bits
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_reg_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[c2]"></a>SYSCTRL_SetLDOOutput</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, peripheral_sysctrl.o(.text.SYSCTRL_SetLDOOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SYSCTRL_SetLDOOutput &rArr; set_reg_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_reg_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_Init
</UL>

<P><STRONG><a name="[4]"></a>TIMER1_IrqHandler</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ctrl_emi.o(.text.TIMER1_IrqHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIMER1_IrqHandler &rArr; TMR_IntClr
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_IntClr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ctrl_emi.o(.text.EMI_Timer_Init)
</UL>
<P><STRONG><a name="[61]"></a>TMR_Enable</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, peripheral_timer.o(.text.TMR_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TMR_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMI_Timer_Start
</UL>

<P><STRONG><a name="[5e]"></a>TMR_GetClk</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, peripheral_timer.o(.text.TMR_GetClk))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = TMR_GetClk &rArr; SYSCTRL_GetClk &rArr; SYSCTRL_GetPClk &rArr; SYSCTRL_GetHClk &rArr; SYSCTRL_GetPLLClk &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_GetPClk
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_GetClk
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMI_Timer_Start
</UL>

<P><STRONG><a name="[c4]"></a>TMR_IntClr</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, peripheral_timer.o(.text.TMR_IntClr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TMR_IntClr
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IrqHandler
</UL>

<P><STRONG><a name="[5c]"></a>TMR_IntEnable</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, peripheral_timer.o(.text.TMR_IntEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TMR_IntEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMI_Timer_Init
</UL>

<P><STRONG><a name="[60]"></a>TMR_PauseEnable</STRONG> (Thumb, 108 bytes, Stack size 20 bytes, peripheral_timer.o(.text.TMR_PauseEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TMR_PauseEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMI_Timer_Stop
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMI_Timer_Start
</UL>

<P><STRONG><a name="[5b]"></a>TMR_SetOpMode</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, peripheral_timer.o(.text.TMR_SetOpMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TMR_SetOpMode
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMI_Timer_Init
</UL>

<P><STRONG><a name="[5f]"></a>TMR_SetReload</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, peripheral_timer.o(.text.TMR_SetReload))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TMR_SetReload
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMI_Timer_Start
</UL>

<P><STRONG><a name="[e9]"></a>UART_SendData</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, peripheral_uart.o(.text.UART_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_putc
</UL>

<P><STRONG><a name="[119]"></a>apSSP_ClearIntStatus</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, peripheral_ssp.o(.text.apSSP_ClearIntStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = apSSP_ClearIntStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripherals_spi_isr
</UL>

<P><STRONG><a name="[ce]"></a>apSSP_DeviceParametersSet</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, peripheral_ssp.o(.text.apSSP_DeviceParametersSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = apSSP_DeviceParametersSet &rArr; apSSP_Initialize &rArr; apSSP_ResetTxFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apSSP_SetTxThres
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apSSP_SetTimingSclkDiv
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apSSP_SetRxThres
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apSSP_IntEnable
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apSSP_Initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_peripherals_spi_module
</UL>

<P><STRONG><a name="[118]"></a>apSSP_GetIntRawStatus</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, peripheral_ssp.o(.text.apSSP_GetIntRawStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = apSSP_GetIntRawStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripherals_spi_isr
</UL>

<P><STRONG><a name="[cf]"></a>apSSP_Initialize</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, peripheral_ssp.o(.text.apSSP_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = apSSP_Initialize &rArr; apSSP_ResetTxFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apSSP_ResetTxFifo
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apSSP_ResetRxFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apSSP_DeviceParametersSet
</UL>

<P><STRONG><a name="[d3]"></a>apSSP_IntEnable</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, peripheral_ssp.o(.text.apSSP_IntEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = apSSP_IntEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apSSP_DeviceParametersSet
</UL>

<P><STRONG><a name="[d5]"></a>apSSP_ResetRxFifo</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, peripheral_ssp.o(.text.apSSP_ResetRxFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = apSSP_ResetRxFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apSSP_Initialize
</UL>

<P><STRONG><a name="[d4]"></a>apSSP_ResetTxFifo</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, peripheral_ssp.o(.text.apSSP_ResetTxFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = apSSP_ResetTxFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apSSP_Initialize
</UL>

<P><STRONG><a name="[11e]"></a>apSSP_SetRxDmaEn</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, peripheral_ssp.o(.text.apSSP_SetRxDmaEn))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = apSSP_SetRxDmaEn
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripherals_spi_read_data
</UL>

<P><STRONG><a name="[d1]"></a>apSSP_SetRxThres</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, peripheral_ssp.o(.text.apSSP_SetRxThres))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = apSSP_SetRxThres
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apSSP_DeviceParametersSet
</UL>

<P><STRONG><a name="[d2]"></a>apSSP_SetTimingSclkDiv</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, peripheral_ssp.o(.text.apSSP_SetTimingSclkDiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = apSSP_SetTimingSclkDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apSSP_DeviceParametersSet
</UL>

<P><STRONG><a name="[11f]"></a>apSSP_SetTransferControlRdTranCnt</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, peripheral_ssp.o(.text.apSSP_SetTransferControlRdTranCnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = apSSP_SetTransferControlRdTranCnt
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripherals_spi_read_data
</UL>

<P><STRONG><a name="[11d]"></a>apSSP_SetTransferControlWrTranCnt</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, peripheral_ssp.o(.text.apSSP_SetTransferControlWrTranCnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = apSSP_SetTransferControlWrTranCnt
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripherals_spi_push_data
</UL>

<P><STRONG><a name="[11c]"></a>apSSP_SetTxDmaEn</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, peripheral_ssp.o(.text.apSSP_SetTxDmaEn))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = apSSP_SetTxDmaEn
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripherals_spi_push_data
</UL>

<P><STRONG><a name="[d0]"></a>apSSP_SetTxThres</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, peripheral_ssp.o(.text.apSSP_SetTxThres))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = apSSP_SetTxThres
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apSSP_DeviceParametersSet
</UL>

<P><STRONG><a name="[d7]"></a>apUART_BaudRateSet</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, peripheral_uart.o(.text.apUART_BaudRateSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = apUART_BaudRateSet
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apUART_Initialize
</UL>

<P><STRONG><a name="[e8]"></a>apUART_Check_TXFIFO_FULL</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, peripheral_uart.o(.text.apUART_Check_TXFIFO_FULL))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = apUART_Check_TXFIFO_FULL
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_putc
</UL>

<P><STRONG><a name="[d6]"></a>apUART_Initialize</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, peripheral_uart.o(.text.apUART_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = apUART_Initialize &rArr; apUART_BaudRateSet
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apUART_BaudRateSet
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_uart
</UL>

<P><STRONG><a name="[3]"></a>app_main</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, main.o(.text.app_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = app_main &rArr; setup_peripherals &rArr; bsp_spi_iap_init &rArr; setup_peripherals_spi_pin &rArr; PINCTRL_SelSpiPins &rArr; PINCTRL_SelSpiIn0 &rArr; PINCTRL_SelInput &rArr; PINCTRL_SetPadMux &rArr; set_reg_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_rtt_init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_peripherals
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_set_evt_callback_table
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_config
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_impl_get_driver
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_SelectHClk
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_GetHClk
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ConfigPLLClk
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ConfigBOR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ing91600.o(.text)
</UL>
<P><STRONG><a name="[dd]"></a>bsp_spi_iap_init</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, spi_spi1_read_write_with_dma.o(.text.bsp_spi_iap_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = bsp_spi_iap_init &rArr; setup_peripherals_spi_pin &rArr; PINCTRL_SelSpiPins &rArr; PINCTRL_SelSpiIn0 &rArr; PINCTRL_SelInput &rArr; PINCTRL_SetPadMux &rArr; set_reg_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Reset
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_peripherals_spi_pin
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_peripherals_spi_module
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripherals_spi_read_data
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripherals_spi_push_data
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_set_irq_callback
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ClearClkGateMulti
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_peripherals
</UL>

<P><STRONG><a name="[94]"></a>bsp_spi_iap_recv_callback_register</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, spi_spi1_read_write_with_dma.o(.text.bsp_spi_iap_recv_callback_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = bsp_spi_iap_recv_callback_register
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Transport_Init
</UL>

<P><STRONG><a name="[96]"></a>bsp_spi_iap_send</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, spi_spi1_read_write_with_dma.o(.text.bsp_spi_iap_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = bsp_spi_iap_send &rArr; peripherals_spi_push_data &rArr; peripherals_spi_dma_to_txfifo &rArr; DMA_PrepareMem2Peripheral &rArr; DMA_GetCtrlConfigDst
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripherals_spi_push_data
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Transport_Send_Dummy
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Transport_Send_ACK
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Transport_send_single_pack
</UL>

<P><STRONG><a name="[13c]"></a>bsp_spi_ucm_recv_callback_register</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, spi_spi1_read_write_with_dma.o(.text.bsp_spi_ucm_recv_callback_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = bsp_spi_ucm_recv_callback_register
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucm_init
</UL>

<P><STRONG><a name="[e3]"></a>bsp_spi_ucm_send</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, spi_spi1_read_write_with_dma.o(.text.bsp_spi_ucm_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = bsp_spi_ucm_send &rArr; peripherals_spi_push_data &rArr; peripherals_spi_dma_to_txfifo &rArr; DMA_PrepareMem2Peripheral &rArr; DMA_GetCtrlConfigDst
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripherals_spi_push_data
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_modify_usb_info_result
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usb_ucm_normal_send_result
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usb_send_success
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usb_send_failed
</UL>

<P><STRONG><a name="[29]"></a>cb_putc</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, main.o(.text.cb_putc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cb_putc &rArr; UART_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apUART_Check_TXFIFO_FULL
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.rodata.evt_cb_table)
</UL>
<P><STRONG><a name="[2f]"></a>cb_trace_rtt</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, trace.o(.text.cb_trace_rtt))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = cb_trace_rtt &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_GetAvailWriteSpace
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_get_gen_os_driver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.rodata.evt_cb_table)
</UL>
<P><STRONG><a name="[eb]"></a>config_uart</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, main.o(.text.config_uart))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = config_uart &rArr; apUART_Initialize &rArr; apUART_BaudRateSet
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apUART_Initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_peripherals
</UL>

<P><STRONG><a name="[f0]"></a>custom_main_loop</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, cust_main.o(.text.custom_main_loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = custom_main_loop &rArr; ucm_loop &rArr; emi_loop &rArr; emi_start_process &rArr; emi_star_a_test &rArr; start_test_dif_case &rArr; start_sweep_tx_v4 &rArr; EMI_Timer_Start &rArr; TMR_GetClk &rArr; SYSCTRL_GetClk &rArr; SYSCTRL_GetPClk &rArr; SYSCTRL_GetHClk &rArr; SYSCTRL_GetPLLClk &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucm_loop
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_process
</UL>

<P><STRONG><a name="[13b]"></a>emi_enable</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, ctrl_emi.o(.text.emi_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = emi_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucm_emi_enable
</UL>

<P><STRONG><a name="[f6]"></a>emi_has_running_test_or_task</STRONG> (Thumb, 54 bytes, Stack size 4 bytes, ctrl_emi.o(.text.emi_has_running_test_or_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = emi_has_running_test_or_task
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emi_start_process
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emi_forward_process
</UL>

<P><STRONG><a name="[f8]"></a>emi_init</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, ctrl_emi.o(.text.emi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = emi_init &rArr; EMI_Timer_Init &rArr; SYSCTRL_ClearClkGateMulti &rArr; SYSCTRL_ClearClkGate &rArr; SYSCTRL_ClkGateCtrl &rArr; set_reg_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMI_Timer_Init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_command_complete_user_handler_register
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucm_init
</UL>

<P><STRONG><a name="[fa]"></a>emi_loop</STRONG> (Thumb, 618 bytes, Stack size 48 bytes, ctrl_emi.o(.text.emi_loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = emi_loop &rArr; emi_start_process &rArr; emi_star_a_test &rArr; start_test_dif_case &rArr; start_sweep_tx_v4 &rArr; EMI_Timer_Start &rArr; TMR_GetClk &rArr; SYSCTRL_GetClk &rArr; SYSCTRL_GetPClk &rArr; SYSCTRL_GetHClk &rArr; SYSCTRL_GetPLLClk &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_running_task_flag
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMI_Timer_Stop
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_is_empty
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emi_trigger_stop_process
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emi_trigger_start_process
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emi_trigger_forward_process
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emi_stop_process
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emi_start_process
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emi_forward_process
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dequeue_request
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usb_send_success
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usb_send_failed
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_get_us_time
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucm_loop
</UL>

<P><STRONG><a name="[106]"></a>emi_state_busy</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, ctrl_emi.o(.text.emi_state_busy))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = emi_state_busy
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emi_start_process
</UL>

<P><STRONG><a name="[103]"></a>emi_test_set_timeout</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, ctrl_emi.o(.text.emi_test_set_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = emi_test_set_timeout
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_get_us_time
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emi_stop_a_test
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emi_star_a_test
</UL>

<P><STRONG><a name="[105]"></a>emi_test_wait_timeout</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, ctrl_emi.o(.text.emi_test_wait_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = emi_test_wait_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emi_stop_a_test
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emi_star_a_test
</UL>

<P><STRONG><a name="[82]"></a>erase_flash_sector</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, eflash.o(.text.erase_flash_sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = erase_flash_sector &rArr; program_flash
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_fota_metadata
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Flash_Erase
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_prepare_factory_data
</UL>

<P><STRONG><a name="[c1]"></a>flash_get_factory_calib_data</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, eflash.o(.text.flash_get_factory_calib_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = flash_get_factory_calib_data &rArr; flash_prepare_factory_data &rArr; copy_security_data &rArr; read_flash_security &rArr; SYSCTRL_ICacheControl &rArr; SYSCTRL_CacheControl0 &rArr; set_reg_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_prepare_factory_data
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_Init
</UL>

<P><STRONG><a name="[10b]"></a>flash_prepare_factory_data</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, eflash.o(.text.flash_prepare_factory_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = flash_prepare_factory_data &rArr; copy_security_data &rArr; read_flash_security &rArr; SYSCTRL_ICacheControl &rArr; SYSCTRL_CacheControl0 &rArr; set_reg_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_flash_security
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_flash_sector
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_data_ready
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_security_data
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_get_factory_calib_data
</UL>

<P><STRONG><a name="[10d]"></a>fputc</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, main.o(.text.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = fputc &rArr; cb_putc &rArr; UART_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_putc
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>

<P><STRONG><a name="[6b]"></a>getCRC16</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, crc16.o(.text.getCRC16))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = getCRC16 &rArr; rom_crc16_large
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rom_crc16_large
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isCheckHeaderValid
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAppCrcValid
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CMD_FlashWrite_handler
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_APP_SendACK
</UL>

<P><STRONG><a name="[10f]"></a>hci_cmd_cmpl_user_handler</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, profile.o(.text.hci_cmd_cmpl_user_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = hci_cmd_cmpl_user_handler &rArr; hci_event_command_complete_get_command_opcode
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_event_command_complete_get_command_opcode
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
</UL>

<P><STRONG><a name="[f9]"></a>hci_command_complete_user_handler_register</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, profile.o(.text.hci_command_complete_user_handler_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hci_command_complete_user_handler_register
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emi_init
</UL>

<P><STRONG><a name="[9b]"></a>ing2p4g_rst</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, test_emi.o(.text.ing2p4g_rst))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ing2p4g_rst &rArr; nop
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nop
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFTestTx
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLE_TX_STOP
</UL>

<P><STRONG><a name="[25]"></a>noos_start</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, noos_impl.o(.text.noos_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = noos_start
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init_controller (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noos_impl.o(.rodata.driver)
</UL>
<P><STRONG><a name="[99]"></a>nop</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, common.o(.text.nop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nop
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFTestTx
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing2p4g_rst
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLE_SPI_WRITE
</UL>

<P><STRONG><a name="[2d]"></a>on_lle_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, main.o(.text.on_lle_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = on_lle_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.rodata.evt_cb_table)
</UL>
<P><STRONG><a name="[dc]"></a>os_impl_get_driver</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, noos_impl.o(.text.os_impl_get_driver))
<BR><BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[28]"></a>pendsv_isr</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, noos_impl.o(.text.pendsv_isr))
<BR>[Address Reference Count : 1]<UL><LI> noos_impl.o(.rodata.driver)
</UL>
<P><STRONG><a name="[10a]"></a>program_flash</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, eflash.o(.text.program_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = program_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_flash_sector
</UL>

<P><STRONG><a name="[80]"></a>program_fota_metadata</STRONG> (Thumb, 170 bytes, Stack size 48 bytes, iap_bootloader.o(.text.program_fota_metadata))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = program_fota_metadata &rArr; write_flash &rArr; write_flash0
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_flash_sector
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_DoUpdate_Delay_Timeout_Callback
</UL>

<P><STRONG><a name="[ef]"></a>read_flash_security</STRONG> (Thumb, 72 bytes, Stack size 96 bytes, eflash.o(.text.read_flash_security))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = read_flash_security &rArr; SYSCTRL_ICacheControl &rArr; SYSCTRL_CacheControl0 &rArr; set_reg_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ICacheControl
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_flash_security0
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_prepare_factory_data
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_security_data
</UL>

<P><STRONG><a name="[10e]"></a>rom_crc16_large</STRONG> (Thumb, 108 bytes, Stack size 12 bytes, crc16.o(.text.rom_crc16_large))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rom_crc16_large
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCRC16
</UL>

<P><STRONG><a name="[da]"></a>setup_peripherals</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, main.o(.text.setup_peripherals))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = setup_peripherals &rArr; bsp_spi_iap_init &rArr; setup_peripherals_spi_pin &rArr; PINCTRL_SelSpiPins &rArr; PINCTRL_SelSpiIn0 &rArr; PINCTRL_SelInput &rArr; PINCTRL_SetPadMux &rArr; set_reg_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_uart
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spi_iap_init
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ClearClkGateMulti
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINCTRL_SetPadMux
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO_WriteValue
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO_SetDirection
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[2a]"></a>setup_profile</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, profile.o(.text.setup_profile))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = setup_profile &rArr; ucm_init &rArr; emi_init &rArr; EMI_Timer_Init &rArr; SYSCTRL_ClearClkGateMulti &rArr; SYSCTRL_ClearClkGate &rArr; SYSCTRL_ClkGateCtrl &rArr; set_reg_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucm_init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_add_event_handler
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_register_packet_handler
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_init
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.rodata.evt_cb_table)
</UL>
<P><STRONG><a name="[27]"></a>svc_isr</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, noos_impl.o(.text.svc_isr))
<BR>[Address Reference Count : 1]<UL><LI> noos_impl.o(.rodata.driver)
</UL>
<P><STRONG><a name="[26]"></a>tick_isr</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, noos_impl.o(.text.tick_isr))
<BR>[Address Reference Count : 1]<UL><LI> noos_impl.o(.rodata.driver)
</UL>
<P><STRONG><a name="[13]"></a>trace_full_dump2</STRONG> (Thumb, 252 bytes, Stack size 80 bytes, trace.o(.text.trace_full_dump2))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = trace_full_dump2 &rArr; hex_dump &rArr; hex_dump_line &rArr; nibble_to_char
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex_dump
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_heap_out_of_mem
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_hard_fault
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_assertion
</UL>
<BR>[Address Reference Count : 1]<UL><LI> trace.o(.text.trace_full_dump2)
</UL>
<P><STRONG><a name="[db]"></a>trace_rtt_init</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, trace.o(.text.trace_rtt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = trace_rtt_init &rArr; SEGGER_RTT_Init &rArr; _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[13a]"></a>ucm_emi_enable</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ctrl.o(.text.ucm_emi_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ucm_emi_enable &rArr; emi_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emi_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
</UL>

<P><STRONG><a name="[126]"></a>ucm_init</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ctrl.o(.text.ucm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = ucm_init &rArr; emi_init &rArr; EMI_Timer_Init &rArr; SYSCTRL_ClearClkGateMulti &rArr; SYSCTRL_ClearClkGate &rArr; SYSCTRL_ClkGateCtrl &rArr; set_reg_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emi_init
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spi_ucm_recv_callback_register
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_profile
</UL>

<P><STRONG><a name="[f1]"></a>ucm_loop</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ctrl.o(.text.ucm_loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = ucm_loop &rArr; emi_loop &rArr; emi_start_process &rArr; emi_star_a_test &rArr; start_test_dif_case &rArr; start_sweep_tx_v4 &rArr; EMI_Timer_Start &rArr; TMR_GetClk &rArr; SYSCTRL_GetClk &rArr; SYSCTRL_GetPClk &rArr; SYSCTRL_GetHClk &rArr; SYSCTRL_GetPLLClk &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emi_loop
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_main_loop
</UL>

<P><STRONG><a name="[ff]"></a>update_running_task_flag</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, ctrl_emi.o(.text.update_running_task_flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = update_running_task_flag
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emi_loop
</UL>

<P><STRONG><a name="[83]"></a>write_flash</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, eflash.o(.text.write_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = write_flash &rArr; write_flash0
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash0
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_fota_metadata
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Flash_Write
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_security_data
</UL>

<P><STRONG><a name="[142]"></a>write_flash0</STRONG> (Thumb, 212 bytes, Stack size 48 bytes, eflash.o(.text.write_flash0))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = write_flash0
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash
</UL>

<P><STRONG><a name="[143]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[15e]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[15f]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[160]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[139]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_full_dump2
</UL>

<P><STRONG><a name="[161]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[162]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[163]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[22]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noos_impl.o(.rodata.driver)
</UL>
<P><STRONG><a name="[21]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noos_impl.o(.rodata.driver)
</UL>
<P><STRONG><a name="[a]"></a>puts</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, puts.o(i.puts))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = puts &rArr; fputc &rArr; cb_putc &rArr; UART_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Address Reference Count : 3]<UL><LI> main.o(.text.cb_hard_fault)
<LI> main.o(.text.cb_assertion)
<LI> main.o(.text.cb_heap_out_of_mem)
</UL>
<P><STRONG><a name="[115]"></a>platform_init_controller</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;noos_start (via Veneer)
</UL>

<P><STRONG><a name="[121]"></a>platform_controller_run</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_recv_msg (via Veneer)
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[2c]"></a>cb_assertion</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, main.o(.text.cb_assertion))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = cb_assertion &rArr; trace_full_dump2 &rArr; hex_dump &rArr; hex_dump_line &rArr; nibble_to_char
</UL>
<BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_full_dump2
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.rodata.evt_cb_table)
</UL>
<P><STRONG><a name="[2b]"></a>cb_hard_fault</STRONG> (Thumb, 80 bytes, Stack size 48 bytes, main.o(.text.cb_hard_fault))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = cb_hard_fault &rArr; trace_full_dump2 &rArr; hex_dump &rArr; hex_dump_line &rArr; nibble_to_char
</UL>
<BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_full_dump2
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.rodata.evt_cb_table)
</UL>
<P><STRONG><a name="[2e]"></a>cb_heap_out_of_mem</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, main.o(.text.cb_heap_out_of_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = cb_heap_out_of_mem &rArr; trace_full_dump2 &rArr; hex_dump &rArr; hex_dump_line &rArr; nibble_to_char
</UL>
<BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_full_dump2
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.rodata.evt_cb_table)
</UL>
<P><STRONG><a name="[1e]"></a>dummy_event_create</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, noos_impl.o(.text.dummy_event_create))
<BR>[Address Reference Count : 1]<UL><LI> noos_impl.o(.rodata.driver)
</UL>
<P><STRONG><a name="[20]"></a>dummy_event_set</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, noos_impl.o(.text.dummy_event_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = dummy_event_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noos_impl.o(.rodata.driver)
</UL>
<P><STRONG><a name="[1f]"></a>dummy_event_wait</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, noos_impl.o(.text.dummy_event_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = dummy_event_wait
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noos_impl.o(.rodata.driver)
</UL>
<P><STRONG><a name="[23]"></a>enter_critical</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, noos_impl.o(.text.enter_critical))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = enter_critical
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noos_impl.o(.rodata.driver)
</UL>
<P><STRONG><a name="[114]"></a>idle_process</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, noos_impl.o(.text.idle_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = idle_process &rArr; custom_main_loop &rArr; ucm_loop &rArr; emi_loop &rArr; emi_start_process &rArr; emi_star_a_test &rArr; start_test_dif_case &rArr; start_sweep_tx_v4 &rArr; EMI_Timer_Start &rArr; TMR_GetClk &rArr; SYSCTRL_GetClk &rArr; SYSCTRL_GetPClk &rArr; SYSCTRL_GetHClk &rArr; SYSCTRL_GetPLLClk &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_main_loop
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_recv_msg
</UL>

<P><STRONG><a name="[24]"></a>leave_critical</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, noos_impl.o(.text.leave_critical))
<BR>[Address Reference Count : 1]<UL><LI> noos_impl.o(.rodata.driver)
</UL>
<P><STRONG><a name="[1b]"></a>queue_create</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, noos_impl.o(.text.queue_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = queue_create &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noos_impl.o(.rodata.driver)
</UL>
<P><STRONG><a name="[1d]"></a>queue_recv_msg</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, noos_impl.o(.text.queue_recv_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = queue_recv_msg &rArr; idle_process &rArr; custom_main_loop &rArr; ucm_loop &rArr; emi_loop &rArr; emi_start_process &rArr; emi_star_a_test &rArr; start_test_dif_case &rArr; start_sweep_tx_v4 &rArr; EMI_Timer_Start &rArr; TMR_GetClk &rArr; SYSCTRL_GetClk &rArr; SYSCTRL_GetPClk &rArr; SYSCTRL_GetHClk &rArr; SYSCTRL_GetPLLClk &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_controller_run (via Veneer)
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noos_impl.o(.rodata.driver)
</UL>
<P><STRONG><a name="[1c]"></a>queue_send_msg</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, noos_impl.o(.text.queue_send_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = queue_send_msg &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noos_impl.o(.rodata.driver)
</UL>
<P><STRONG><a name="[1a]"></a>task_create</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, noos_impl.o(.text.task_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = task_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noos_impl.o(.rodata.driver)
</UL>
<P><STRONG><a name="[136]"></a>timer_cb</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, noos_impl.o(.text.timer_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = timer_cb
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cb_7
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cb_6
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cb_5
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cb_4
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cb_3
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cb_2
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cb_1
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cb_0
</UL>

<P><STRONG><a name="[32]"></a>timer_cb_0</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, noos_impl.o(.text.timer_cb_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = timer_cb_0 &rArr; timer_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noos_impl.o(.data.sw_timers)
</UL>
<P><STRONG><a name="[33]"></a>timer_cb_1</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, noos_impl.o(.text.timer_cb_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = timer_cb_1 &rArr; timer_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noos_impl.o(.data.sw_timers)
</UL>
<P><STRONG><a name="[34]"></a>timer_cb_2</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, noos_impl.o(.text.timer_cb_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = timer_cb_2 &rArr; timer_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noos_impl.o(.data.sw_timers)
</UL>
<P><STRONG><a name="[35]"></a>timer_cb_3</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, noos_impl.o(.text.timer_cb_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = timer_cb_3 &rArr; timer_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noos_impl.o(.data.sw_timers)
</UL>
<P><STRONG><a name="[36]"></a>timer_cb_4</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, noos_impl.o(.text.timer_cb_4))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = timer_cb_4 &rArr; timer_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noos_impl.o(.data.sw_timers)
</UL>
<P><STRONG><a name="[37]"></a>timer_cb_5</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, noos_impl.o(.text.timer_cb_5))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = timer_cb_5 &rArr; timer_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noos_impl.o(.data.sw_timers)
</UL>
<P><STRONG><a name="[38]"></a>timer_cb_6</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, noos_impl.o(.text.timer_cb_6))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = timer_cb_6 &rArr; timer_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noos_impl.o(.data.sw_timers)
</UL>
<P><STRONG><a name="[39]"></a>timer_cb_7</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, noos_impl.o(.text.timer_cb_7))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = timer_cb_7 &rArr; timer_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noos_impl.o(.data.sw_timers)
</UL>
<P><STRONG><a name="[16]"></a>timer_create</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, noos_impl.o(.text.timer_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = timer_create
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_raise_assertion
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noos_impl.o(.rodata.driver)
</UL>
<P><STRONG><a name="[19]"></a>timer_delete</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, noos_impl.o(.text.timer_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = timer_delete
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_set_timer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noos_impl.o(.rodata.driver)
</UL>
<P><STRONG><a name="[17]"></a>timer_start</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, noos_impl.o(.text.timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = timer_start
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_set_timer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noos_impl.o(.rodata.driver)
</UL>
<P><STRONG><a name="[18]"></a>timer_stop</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, noos_impl.o(.text.timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = timer_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_set_timer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noos_impl.o(.rodata.driver)
</UL>
<P><STRONG><a name="[b]"></a>att_read_callback</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, profile.o(.text.att_read_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = att_read_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> profile.o(.text.setup_profile)
</UL>
<P><STRONG><a name="[c]"></a>att_write_callback</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, profile.o(.text.att_write_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = att_write_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> profile.o(.text.setup_profile)
</UL>
<P><STRONG><a name="[13e]"></a>btstack_event_state_get_state</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, profile.o(.text.btstack_event_state_get_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = btstack_event_state_get_state
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
</UL>

<P><STRONG><a name="[110]"></a>hci_event_command_complete_get_command_opcode</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, profile.o(.text.hci_event_command_complete_get_command_opcode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = hci_event_command_complete_get_command_opcode
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cmd_cmpl_user_handler
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
</UL>

<P><STRONG><a name="[13f]"></a>hci_event_le_meta_get_subevent_code</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, profile.o(.text.hci_event_le_meta_get_subevent_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = hci_event_le_meta_get_subevent_code
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
</UL>

<P><STRONG><a name="[13d]"></a>hci_event_packet_get_type</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, profile.o(.text.hci_event_packet_get_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = hci_event_packet_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
</UL>

<P><STRONG><a name="[140]"></a>hci_event_packet_get_user_msg</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, profile.o(.text.hci_event_packet_get_user_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = hci_event_packet_get_user_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
</UL>

<P><STRONG><a name="[141]"></a>user_msg_handler</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, profile.o(.text.user_msg_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = user_msg_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
</UL>

<P><STRONG><a name="[d]"></a>user_packet_handler</STRONG> (Thumb, 224 bytes, Stack size 48 bytes, profile.o(.text.user_packet_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = user_packet_handler &rArr; hci_cmd_cmpl_user_handler &rArr; hci_event_command_complete_get_command_opcode
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucm_emi_enable
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cmd_cmpl_user_handler
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_msg_handler
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_event_packet_get_user_msg
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_event_packet_get_type
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_event_le_meta_get_subevent_code
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_event_command_complete_get_command_opcode
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_event_state_get_state
</UL>
<BR>[Address Reference Count : 1]<UL><LI> profile.o(.text.setup_profile)
</UL>
<P><STRONG><a name="[ee]"></a>copy_security_data</STRONG> (Thumb, 124 bytes, Stack size 96 bytes, eflash.o(.text.copy_security_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = copy_security_data &rArr; read_flash_security &rArr; SYSCTRL_ICacheControl &rArr; SYSCTRL_CacheControl0 &rArr; set_reg_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_flash_security
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_prepare_factory_data
</UL>

<P><STRONG><a name="[10c]"></a>is_data_ready</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, eflash.o(.text.is_data_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = is_data_ready
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_prepare_factory_data
</UL>

<P><STRONG><a name="[123]"></a>read_flash_security0</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, eflash.o(.text.read_flash_security0))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = read_flash_security0 &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;security_page_read
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_flash_security
</UL>

<P><STRONG><a name="[124]"></a>security_page_read</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, eflash.o(.text.security_page_read))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_flash_security0
</UL>

<P><STRONG><a name="[65]"></a>GIO_MaskedWrite</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, peripheral_gpio.o(.text.GIO_MaskedWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GIO_MaskedWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO_SetDirection
</UL>

<P><STRONG><a name="[9c]"></a>PINCTRL_SelInput</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, peripheral_pinctrl.o(.text.PINCTRL_SelInput))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = PINCTRL_SelInput &rArr; PINCTRL_SetPadMux &rArr; set_reg_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINCTRL_SetPadMux
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_reg_bits
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_id_for_input_source
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINCTRL_SelSpiIn0
</UL>

<P><STRONG><a name="[a0]"></a>PINCTRL_SelSpiIn0</STRONG> (Thumb, 598 bytes, Stack size 80 bytes, peripheral_pinctrl.o(.text.PINCTRL_SelSpiIn0))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = PINCTRL_SelSpiIn0 &rArr; PINCTRL_SelInput &rArr; PINCTRL_SetPadMux &rArr; set_reg_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINCTRL_SelInput
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINCTRL_SelSpiPins
</UL>

<P><STRONG><a name="[9e]"></a>pin_id_for_input_source</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, peripheral_pinctrl.o(.text.pin_id_for_input_source))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pin_id_for_input_source
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINCTRL_SelInput
</UL>

<P><STRONG><a name="[9d]"></a>set_reg_bits</STRONG> (Thumb, 76 bytes, Stack size 28 bytes, peripheral_pinctrl.o(.text.set_reg_bits))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = set_reg_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINCTRL_SetPadMux
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINCTRL_SelInput
</UL>

<P><STRONG><a name="[a2]"></a>source_id_on_pin</STRONG> (Thumb, 168 bytes, Stack size 20 bytes, peripheral_pinctrl.o(.text.source_id_on_pin))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = source_id_on_pin
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINCTRL_SetPadMux
</UL>

<P><STRONG><a name="[ae]"></a>SYSCTRL_CacheControl0</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, peripheral_sysctrl.o(.text.SYSCTRL_CacheControl0))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SYSCTRL_CacheControl0 &rArr; set_reg_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_reg_bits
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_reg_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ICacheControl
</UL>

<P><STRONG><a name="[b2]"></a>SYSCTRL_ClkGateCtrl</STRONG> (Thumb, 906 bytes, Stack size 32 bytes, peripheral_sysctrl.o(.text.SYSCTRL_ClkGateCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SYSCTRL_ClkGateCtrl &rArr; set_reg_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_reg_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ClearClkGate
</UL>

<P><STRONG><a name="[b9]"></a>get_safe_divider</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, peripheral_sysctrl.o(.text.get_safe_divider))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_safe_divider
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_GetPClk
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_GetHClk
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_GetClk
</UL>

<P><STRONG><a name="[bd]"></a>get_safe_divider10</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, peripheral_sysctrl.o(.text.get_safe_divider10))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_safe_divider10
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_GetClk
</UL>

<P><STRONG><a name="[ba]"></a>get_safe_divider6</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, peripheral_sysctrl.o(.text.get_safe_divider6))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_safe_divider6
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_GetClk
</UL>

<P><STRONG><a name="[af]"></a>set_reg_bit</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, peripheral_sysctrl.o(.text.set_reg_bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = set_reg_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ClkGateCtrl
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_CacheControl0
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_SelectHClk
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ConfigBOR
</UL>

<P><STRONG><a name="[b0]"></a>set_reg_bits</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, peripheral_sysctrl.o(.text.set_reg_bits))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = set_reg_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_SetLDOOutput
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_CacheControl0
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_SelectHClk
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_Init
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ConfigBOR
</UL>

<P><STRONG><a name="[52]"></a>DMA_GetCtrlConfigDst</STRONG> (Thumb, 344 bytes, Stack size 48 bytes, peripheral_dma.o(.text.DMA_GetCtrlConfigDst))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DMA_GetCtrlConfigDst
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_PrepareMem2Peripheral
</UL>

<P><STRONG><a name="[54]"></a>DMA_GetCtrlConfigSrc</STRONG> (Thumb, 226 bytes, Stack size 44 bytes, peripheral_dma.o(.text.DMA_GetCtrlConfigSrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = DMA_GetCtrlConfigSrc
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_PreparePeripheral2Mem
</UL>

<P><STRONG><a name="[4c]"></a>DMA_GetPeripheralDataAddr</STRONG> (Thumb, 368 bytes, Stack size 24 bytes, peripheral_dma.o(.text.DMA_GetPeripheralDataAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DMA_GetPeripheralDataAddr &rArr; PWM_GetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_GetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_PreparePeripheral2Mem
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_PrepareMem2Peripheral
</UL>

<P><STRONG><a name="[4e]"></a>DMA_GetPeripheralWidth</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, peripheral_dma.o(.text.DMA_GetPeripheralWidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DMA_GetPeripheralWidth &rArr; DMG_GetSPIDMAWidth
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMG_GetSPIDMAWidth
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_PreparePeripheral2Mem
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_PrepareMem2Peripheral
</UL>

<P><STRONG><a name="[4f]"></a>DMG_GetSPIDMAWidth</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, peripheral_dma.o(.text.DMG_GetSPIDMAWidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMG_GetSPIDMAWidth
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetPeripheralWidth
</UL>

<P><STRONG><a name="[a9]"></a>_DoInit</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, trace.o(.text._DoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Init
</UL>

<P><STRONG><a name="[a7]"></a>_GetAvailWriteSpace</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, trace.o(.text._GetAvailWriteSpace))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _GetAvailWriteSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_GetAvailWriteSpace
</UL>

<P><STRONG><a name="[ad]"></a>_WriteBlocking</STRONG> (Thumb, 224 bytes, Stack size 48 bytes, trace.o(.text._WriteBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[ac]"></a>_WriteNoCheck</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, trace.o(.text._WriteNoCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _WriteNoCheck &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[111]"></a>hex_dump</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, trace.o(.text.hex_dump))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = hex_dump &rArr; hex_dump_line &rArr; nibble_to_char
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex_dump_line
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_full_dump2
</UL>

<P><STRONG><a name="[112]"></a>hex_dump_line</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, trace.o(.text.hex_dump_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = hex_dump_line &rArr; nibble_to_char
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nibble_to_char
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex_dump
</UL>

<P><STRONG><a name="[113]"></a>nibble_to_char</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, trace.o(.text.nibble_to_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nibble_to_char
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex_dump_line
</UL>

<P><STRONG><a name="[c5]"></a>UCM_Command_Dispatch</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ctrl.o(.text.UCM_Command_Dispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = UCM_Command_Dispatch &rArr; UCM_Command_Dispatch_Modify_USB_Info &rArr; send_modify_usb_info_result &rArr; bsp_spi_ucm_send &rArr; peripherals_spi_push_data &rArr; peripherals_spi_dma_to_txfifo &rArr; DMA_PrepareMem2Peripheral &rArr; DMA_GetCtrlConfigDst
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UCM_Command_Dispatch_Modify_USB_Info
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UCM_Packaging_Dispatch
</UL>

<P><STRONG><a name="[c6]"></a>UCM_Command_Dispatch_Modify_USB_Info</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, ctrl.o(.text.UCM_Command_Dispatch_Modify_USB_Info))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = UCM_Command_Dispatch_Modify_USB_Info &rArr; send_modify_usb_info_result &rArr; bsp_spi_ucm_send &rArr; peripherals_spi_push_data &rArr; peripherals_spi_dma_to_txfifo &rArr; DMA_PrepareMem2Peripheral &rArr; DMA_GetCtrlConfigDst
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_modify_usb_info_result
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UCM_Command_Dispatch
</UL>

<P><STRONG><a name="[c8]"></a>UCM_Dispatch</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, ctrl.o(.text.UCM_Dispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = UCM_Dispatch &rArr; UCM_Packaging_Dispatch &rArr; UCM_Command_Dispatch &rArr; UCM_Command_Dispatch_Modify_USB_Info &rArr; send_modify_usb_info_result &rArr; bsp_spi_ucm_send &rArr; peripherals_spi_push_data &rArr; peripherals_spi_dma_to_txfifo &rArr; DMA_PrepareMem2Peripheral &rArr; DMA_GetCtrlConfigDst
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usb_ucm_normal_send_result
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UCM_Packaging_Dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usb_hid_ucm_recv_callback
</UL>

<P><STRONG><a name="[c9]"></a>UCM_Packaging_Dispatch</STRONG> (Thumb, 510 bytes, Stack size 64 bytes, ctrl.o(.text.UCM_Packaging_Dispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = UCM_Packaging_Dispatch &rArr; UCM_Command_Dispatch &rArr; UCM_Command_Dispatch_Modify_USB_Info &rArr; send_modify_usb_info_result &rArr; bsp_spi_ucm_send &rArr; peripherals_spi_push_data &rArr; peripherals_spi_dma_to_txfifo &rArr; DMA_PrepareMem2Peripheral &rArr; DMA_GetCtrlConfigDst
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_sum_8
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UCM_Packaging_Set_Idle
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UCM_Command_Dispatch
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UCM_Dispatch
</UL>

<P><STRONG><a name="[cc]"></a>UCM_Packaging_Set_Idle</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ctrl.o(.text.UCM_Packaging_Set_Idle))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UCM_Packaging_Dispatch
</UL>

<P><STRONG><a name="[14]"></a>bsp_usb_hid_ucm_recv_callback</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, ctrl.o(.text.bsp_usb_hid_ucm_recv_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = bsp_usb_hid_ucm_recv_callback &rArr; UCM_Dispatch &rArr; UCM_Packaging_Dispatch &rArr; UCM_Command_Dispatch &rArr; UCM_Command_Dispatch_Modify_USB_Info &rArr; send_modify_usb_info_result &rArr; bsp_spi_ucm_send &rArr; peripherals_spi_push_data &rArr; peripherals_spi_dma_to_txfifo &rArr; DMA_PrepareMem2Peripheral &rArr; DMA_GetCtrlConfigDst
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMI_Dispatch
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UCM_Dispatch
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ctrl.o(.text.ucm_init)
</UL>
<P><STRONG><a name="[ca]"></a>bsp_usb_ucm_normal_send_result</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, ctrl.o(.text.bsp_usb_ucm_normal_send_result))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = bsp_usb_ucm_normal_send_result &rArr; bsp_spi_ucm_send &rArr; peripherals_spi_push_data &rArr; peripherals_spi_dma_to_txfifo &rArr; DMA_PrepareMem2Peripheral &rArr; DMA_GetCtrlConfigDst
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spi_ucm_send
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_sum_8
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UCM_Dispatch
</UL>

<P><STRONG><a name="[cb]"></a>calc_sum_8</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, ctrl.o(.text.calc_sum_8))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = calc_sum_8
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_modify_usb_info_result
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usb_ucm_normal_send_result
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UCM_Packaging_Dispatch
</UL>

<P><STRONG><a name="[c7]"></a>send_modify_usb_info_result</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, ctrl.o(.text.send_modify_usb_info_result))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = send_modify_usb_info_result &rArr; bsp_spi_ucm_send &rArr; peripherals_spi_push_data &rArr; peripherals_spi_dma_to_txfifo &rArr; DMA_PrepareMem2Peripheral &rArr; DMA_GetCtrlConfigDst
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spi_ucm_send
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_sum_8
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UCM_Command_Dispatch_Modify_USB_Info
</UL>

<P><STRONG><a name="[30]"></a>EMI_on_hci_cmd_complete_start_test</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, ctrl_emi.o(.text.EMI_on_hci_cmd_complete_start_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = EMI_on_hci_cmd_complete_start_test
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ctrl_emi.o(.data.emi_cmd_cmpl_handler_map)
</UL>
<P><STRONG><a name="[31]"></a>EMI_on_hci_cmd_complete_stop_test</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, ctrl_emi.o(.text.EMI_on_hci_cmd_complete_stop_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = EMI_on_hci_cmd_complete_stop_test &rArr; hci_event_command_complete_get_return_parameters
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_event_command_complete_get_return_parameters
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ctrl_emi.o(.data.emi_cmd_cmpl_handler_map)
</UL>
<P><STRONG><a name="[e4]"></a>bsp_usb_send_failed</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, ctrl_emi.o(.text.bsp_usb_send_failed))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = bsp_usb_send_failed &rArr; bsp_spi_ucm_send &rArr; peripherals_spi_push_data &rArr; peripherals_spi_dma_to_txfifo &rArr; DMA_PrepareMem2Peripheral &rArr; DMA_GetCtrlConfigDst
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spi_ucm_send
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_sum_8
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO_WriteValue
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emi_loop
</UL>

<P><STRONG><a name="[e7]"></a>bsp_usb_send_success</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, ctrl_emi.o(.text.bsp_usb_send_success))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = bsp_usb_send_success &rArr; bsp_spi_ucm_send &rArr; peripherals_spi_push_data &rArr; peripherals_spi_dma_to_txfifo &rArr; DMA_PrepareMem2Peripheral &rArr; DMA_GetCtrlConfigDst
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spi_ucm_send
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_sum_8
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO_WriteValue
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emi_loop
</UL>

<P><STRONG><a name="[e5]"></a>calc_sum_8</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, ctrl_emi.o(.text.calc_sum_8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = calc_sum_8
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usb_send_success
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usb_send_failed
</UL>

<P><STRONG><a name="[ec]"></a>convert_payload_model</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, ctrl_emi.o(.text.convert_payload_model))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = convert_payload_model
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_test_dif_case
</UL>

<P><STRONG><a name="[ed]"></a>convert_tx_power</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, ctrl_emi.o(.text.convert_tx_power))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = convert_tx_power
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_test_dif_case
</UL>

<P><STRONG><a name="[e]"></a>custom_sweep_24g_carrier_task</STRONG> (Thumb, 74 bytes, Stack size 48 bytes, ctrl_emi.o(.text.custom_sweep_24g_carrier_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = custom_sweep_24g_carrier_task &rArr; inqueue_request
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inqueue_request
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ctrl_emi.o(.text.start_custom_sweep_24g_carrier)
</UL>
<P><STRONG><a name="[f]"></a>custom_sweep_24g_tx_v4_task</STRONG> (Thumb, 74 bytes, Stack size 48 bytes, ctrl_emi.o(.text.custom_sweep_24g_tx_v4_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = custom_sweep_24g_tx_v4_task &rArr; inqueue_request
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inqueue_request
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ctrl_emi.o(.text.start_custom_sweep_24g_tx_v4)
</UL>
<P><STRONG><a name="[10]"></a>custom_sweep_tx_v4_task</STRONG> (Thumb, 74 bytes, Stack size 48 bytes, ctrl_emi.o(.text.custom_sweep_tx_v4_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = custom_sweep_tx_v4_task &rArr; inqueue_request
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inqueue_request
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ctrl_emi.o(.text.start_custom_sweep_tx_v4)
</UL>
<P><STRONG><a name="[fc]"></a>dequeue_request</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, ctrl_emi.o(.text.dequeue_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dequeue_request
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emi_loop
</UL>

<P><STRONG><a name="[f2]"></a>emi_forward_process</STRONG> (Thumb, 352 bytes, Stack size 16 bytes, ctrl_emi.o(.text.emi_forward_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = emi_forward_process &rArr; emi_star_a_test &rArr; start_test_dif_case &rArr; start_sweep_tx_v4 &rArr; EMI_Timer_Start &rArr; TMR_GetClk &rArr; SYSCTRL_GetClk &rArr; SYSCTRL_GetPClk &rArr; SYSCTRL_GetHClk &rArr; SYSCTRL_GetPLLClk &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emi_has_running_test_or_task
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iteration_dif_case
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emi_trigger_stop_process
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emi_stop_a_test
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emi_star_a_test
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emi_loop
</UL>

<P><STRONG><a name="[f5]"></a>emi_star_a_test</STRONG> (Thumb, 312 bytes, Stack size 24 bytes, ctrl_emi.o(.text.emi_star_a_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = emi_star_a_test &rArr; start_test_dif_case &rArr; start_sweep_tx_v4 &rArr; EMI_Timer_Start &rArr; TMR_GetClk &rArr; SYSCTRL_GetClk &rArr; SYSCTRL_GetPClk &rArr; SYSCTRL_GetHClk &rArr; SYSCTRL_GetPLLClk &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emi_test_wait_timeout
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emi_test_set_timeout
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_test_dif_case
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setState
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emi_start_process
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emi_forward_process
</UL>

<P><STRONG><a name="[101]"></a>emi_start_process</STRONG> (Thumb, 604 bytes, Stack size 16 bytes, ctrl_emi.o(.text.emi_start_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = emi_start_process &rArr; emi_star_a_test &rArr; start_test_dif_case &rArr; start_sweep_tx_v4 &rArr; EMI_Timer_Start &rArr; TMR_GetClk &rArr; SYSCTRL_GetClk &rArr; SYSCTRL_GetPClk &rArr; SYSCTRL_GetHClk &rArr; SYSCTRL_GetPLLClk &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emi_state_busy
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emi_has_running_test_or_task
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_test_dif_case
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emi_trigger_stop_process
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emi_stop_process
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emi_star_a_test
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emi_loop
</UL>

<P><STRONG><a name="[f4]"></a>emi_stop_a_test</STRONG> (Thumb, 296 bytes, Stack size 24 bytes, ctrl_emi.o(.text.emi_stop_a_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = emi_stop_a_test &rArr; emi_test_stop_hci_test &rArr; LLE_TX_STOP &rArr; ing2p4g_rst &rArr; nop
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emi_test_wait_timeout
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emi_test_set_timeout
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setState
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emi_test_stop_hci_test
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emi_stop_process
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emi_forward_process
</UL>

<P><STRONG><a name="[100]"></a>emi_stop_process</STRONG> (Thumb, 256 bytes, Stack size 16 bytes, ctrl_emi.o(.text.emi_stop_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = emi_stop_process &rArr; emi_stop_a_test &rArr; emi_test_stop_hci_test &rArr; LLE_TX_STOP &rArr; ing2p4g_rst &rArr; nop
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emi_stop_a_test
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emi_loop
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emi_start_process
</UL>

<P><STRONG><a name="[107]"></a>emi_test_stop_hci_test</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, ctrl_emi.o(.text.emi_test_stop_hci_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = emi_test_stop_hci_test &rArr; LLE_TX_STOP &rArr; ing2p4g_rst &rArr; nop
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLE_TX_STOP
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_vendor_tx_continuous_wave
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_test_end
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emi_stop_a_test
</UL>

<P><STRONG><a name="[fd]"></a>emi_trigger_forward_process</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ctrl_emi.o(.text.emi_trigger_forward_process))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emi_loop
</UL>

<P><STRONG><a name="[fe]"></a>emi_trigger_start_process</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ctrl_emi.o(.text.emi_trigger_start_process))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emi_loop
</UL>

<P><STRONG><a name="[f3]"></a>emi_trigger_stop_process</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ctrl_emi.o(.text.emi_trigger_stop_process))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emi_loop
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emi_start_process
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emi_forward_process
</UL>

<P><STRONG><a name="[132]"></a>find_tx_power_index_cw</STRONG> (Thumb, 178 bytes, Stack size 8 bytes, ctrl_emi.o(.text.find_tx_power_index_cw))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = find_tx_power_index_cw
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_test_dif_case
</UL>

<P><STRONG><a name="[133]"></a>find_tx_power_index_rf_test</STRONG> (Thumb, 178 bytes, Stack size 8 bytes, ctrl_emi.o(.text.find_tx_power_index_rf_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = find_tx_power_index_rf_test
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_test_dif_case
</UL>

<P><STRONG><a name="[63]"></a>hci_event_command_complete_get_return_parameters</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, ctrl_emi.o(.text.hci_event_command_complete_get_return_parameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = hci_event_command_complete_get_return_parameters
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMI_on_hci_cmd_complete_stop_test
</UL>

<P><STRONG><a name="[57]"></a>inqueue_request</STRONG> (Thumb, 164 bytes, Stack size 84 bytes, ctrl_emi.o(.text.inqueue_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = inqueue_request
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMI_Dispatch
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sweep_tx_v4_task
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sweep_carrier_task
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_sweep_tx_v4_task
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_sweep_24g_tx_v4_task
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_sweep_24g_carrier_task
</UL>

<P><STRONG><a name="[f7]"></a>iteration_dif_case</STRONG> (Thumb, 506 bytes, Stack size 16 bytes, ctrl_emi.o(.text.iteration_dif_case))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = iteration_dif_case
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emi_forward_process
</UL>

<P><STRONG><a name="[fb]"></a>queue_is_empty</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ctrl_emi.o(.text.queue_is_empty))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emi_loop
</UL>

<P><STRONG><a name="[104]"></a>setState</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, ctrl_emi.o(.text.setState))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = setState
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emi_stop_a_test
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emi_star_a_test
</UL>

<P><STRONG><a name="[12a]"></a>start_custom_sweep_24g_carrier</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, ctrl_emi.o(.text.start_custom_sweep_24g_carrier))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = start_custom_sweep_24g_carrier &rArr; EMI_Timer_Start &rArr; TMR_GetClk &rArr; SYSCTRL_GetClk &rArr; SYSCTRL_GetPClk &rArr; SYSCTRL_GetHClk &rArr; SYSCTRL_GetPLLClk &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMI_Timer_Start
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_test_dif_case
</UL>

<P><STRONG><a name="[12b]"></a>start_custom_sweep_24g_tx_v4</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, ctrl_emi.o(.text.start_custom_sweep_24g_tx_v4))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = start_custom_sweep_24g_tx_v4 &rArr; EMI_Timer_Start &rArr; TMR_GetClk &rArr; SYSCTRL_GetClk &rArr; SYSCTRL_GetPClk &rArr; SYSCTRL_GetHClk &rArr; SYSCTRL_GetPLLClk &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMI_Timer_Start
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_test_dif_case
</UL>

<P><STRONG><a name="[12c]"></a>start_custom_sweep_tx_v4</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, ctrl_emi.o(.text.start_custom_sweep_tx_v4))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = start_custom_sweep_tx_v4 &rArr; EMI_Timer_Start &rArr; TMR_GetClk &rArr; SYSCTRL_GetClk &rArr; SYSCTRL_GetPClk &rArr; SYSCTRL_GetHClk &rArr; SYSCTRL_GetPLLClk &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMI_Timer_Start
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_test_dif_case
</UL>

<P><STRONG><a name="[12d]"></a>start_cw</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, ctrl_emi.o(.text.start_cw))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = start_cw
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_vendor_tx_continuous_wave
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_test_dif_case
</UL>

<P><STRONG><a name="[12e]"></a>start_rx_v2</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, ctrl_emi.o(.text.start_rx_v2))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = start_rx_v2
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_rx_test_v2
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_test_dif_case
</UL>

<P><STRONG><a name="[130]"></a>start_sweep_carrier</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, ctrl_emi.o(.text.start_sweep_carrier))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = start_sweep_carrier &rArr; EMI_Timer_Start &rArr; TMR_GetClk &rArr; SYSCTRL_GetClk &rArr; SYSCTRL_GetPClk &rArr; SYSCTRL_GetHClk &rArr; SYSCTRL_GetPLLClk &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMI_Timer_Start
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_test_dif_case
</UL>

<P><STRONG><a name="[131]"></a>start_sweep_tx_v4</STRONG> (Thumb, 168 bytes, Stack size 48 bytes, ctrl_emi.o(.text.start_sweep_tx_v4))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = start_sweep_tx_v4 &rArr; EMI_Timer_Start &rArr; TMR_GetClk &rArr; SYSCTRL_GetClk &rArr; SYSCTRL_GetPClk &rArr; SYSCTRL_GetHClk &rArr; SYSCTRL_GetPLLClk &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMI_Timer_Start
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_test_dif_case
</UL>

<P><STRONG><a name="[102]"></a>start_test_dif_case</STRONG> (Thumb, 1090 bytes, Stack size 176 bytes, ctrl_emi.o(.text.start_test_dif_case))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = start_test_dif_case &rArr; start_sweep_tx_v4 &rArr; EMI_Timer_Start &rArr; TMR_GetClk &rArr; SYSCTRL_GetClk &rArr; SYSCTRL_GetPClk &rArr; SYSCTRL_GetHClk &rArr; SYSCTRL_GetPLLClk &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFTestTx
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_tx_v4
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_sweep_tx_v4
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_sweep_carrier
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_rx_v2
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_cw
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_custom_sweep_tx_v4
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_custom_sweep_24g_tx_v4
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_custom_sweep_24g_carrier
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_tx_power_index_rf_test
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_tx_power_index_cw
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_tx_power
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_payload_model
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_vendor_tx_continuous_wave
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_tx_test_v4
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emi_start_process
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emi_star_a_test
</UL>

<P><STRONG><a name="[134]"></a>start_tx_v4</STRONG> (Thumb, 98 bytes, Stack size 48 bytes, ctrl_emi.o(.text.start_tx_v4))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = start_tx_v4 &rArr; RFTestTx &rArr; ing2p4g_rst &rArr; nop
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFTestTx
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_test_dif_case
</UL>

<P><STRONG><a name="[11]"></a>sweep_carrier_task</STRONG> (Thumb, 74 bytes, Stack size 48 bytes, ctrl_emi.o(.text.sweep_carrier_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = sweep_carrier_task &rArr; inqueue_request
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inqueue_request
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ctrl_emi.o(.text.start_sweep_carrier)
</UL>
<P><STRONG><a name="[12]"></a>sweep_tx_v4_task</STRONG> (Thumb, 74 bytes, Stack size 48 bytes, ctrl_emi.o(.text.sweep_tx_v4_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = sweep_tx_v4_task &rArr; inqueue_request
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inqueue_request
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ctrl_emi.o(.text.start_sweep_tx_v4)
</UL>
<P><STRONG><a name="[66]"></a>IAP_APP_AddPayloadData</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, iap_application.o(.text.IAP_APP_AddPayloadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IAP_APP_AddPayloadData &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_APP_cmd_dispatch
</UL>

<P><STRONG><a name="[68]"></a>IAP_APP_PreparePayloadDataStart</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, iap_application.o(.text.IAP_APP_PreparePayloadDataStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IAP_APP_PreparePayloadDataStart
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_GetAppBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_APP_cmd_dispatch
</UL>

<P><STRONG><a name="[6a]"></a>IAP_APP_SendACK</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, iap_application.o(.text.IAP_APP_SendACK))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = IAP_APP_SendACK &rArr; IAP_Transport_send_single_pack &rArr; bsp_spi_iap_send &rArr; peripherals_spi_push_data &rArr; peripherals_spi_dma_to_txfifo &rArr; DMA_PrepareMem2Peripheral &rArr; DMA_GetCtrlConfigDst
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCRC16
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Transport_send_single_pack
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_APP_recv_cmd_callback
</UL>

<P><STRONG><a name="[87]"></a>IAP_APP_VersionFormatValidCheck</STRONG> (Thumb, 158 bytes, Stack size 8 bytes, iap_application.o(.text.IAP_APP_VersionFormatValidCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IAP_APP_VersionFormatValidCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Header_Check
</UL>

<P><STRONG><a name="[6d]"></a>IAP_APP_cmd_dispatch</STRONG> (Thumb, 388 bytes, Stack size 56 bytes, iap_application.o(.text.IAP_APP_cmd_dispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = IAP_APP_cmd_dispatch &rArr; IAP_CMD_FlashWrite_handler &rArr; IAP_Flash_Write &rArr; write_flash &rArr; write_flash0
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAppCrcValid
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CMD_SwitchApp_handler
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CMD_Start_handler
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CMD_Reboot_handler
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CMD_FlashWrite_handler
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CMD_FlashRead_handler
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_APP_PreparePayloadDataStart
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_APP_AddPayloadData
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_APP_recv_cmd_callback
</UL>

<P><STRONG><a name="[5]"></a>IAP_APP_recv_cmd_callback</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, iap_application.o(.text.IAP_APP_recv_cmd_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = IAP_APP_recv_cmd_callback &rArr; IAP_APP_SendACK &rArr; IAP_Transport_send_single_pack &rArr; bsp_spi_iap_send &rArr; peripherals_spi_push_data &rArr; peripherals_spi_dma_to_txfifo &rArr; DMA_PrepareMem2Peripheral &rArr; DMA_GetCtrlConfigDst
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_APP_cmd_dispatch
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_APP_SendACK
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iap_application.o(.text.IAP_Application_Init)
</UL>
<P><STRONG><a name="[71]"></a>IAP_CMD_FlashRead_handler</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, iap_application.o(.text.IAP_CMD_FlashRead_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = IAP_CMD_FlashRead_handler &rArr; IAP_Flash_offsetAddr_valid_check
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Flash_offsetAddr_valid_check
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Flash_StartAddr_Get
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_APP_cmd_dispatch
</UL>

<P><STRONG><a name="[70]"></a>IAP_CMD_FlashWrite_handler</STRONG> (Thumb, 818 bytes, Stack size 56 bytes, iap_application.o(.text.IAP_CMD_FlashWrite_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = IAP_CMD_FlashWrite_handler &rArr; IAP_Flash_Write &rArr; write_flash &rArr; write_flash0
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCRC16
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Flash_Write
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Flash_StartAddr_Get
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_APP_cmd_dispatch
</UL>

<P><STRONG><a name="[72]"></a>IAP_CMD_Reboot_handler</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, iap_application.o(.text.IAP_CMD_Reboot_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IAP_CMD_Reboot_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_get_us_time
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_create_us_timer
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_APP_cmd_dispatch
</UL>

<P><STRONG><a name="[6f]"></a>IAP_CMD_Start_handler</STRONG> (Thumb, 206 bytes, Stack size 32 bytes, iap_application.o(.text.IAP_CMD_Start_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = IAP_CMD_Start_handler &rArr; IAP_Header_Check &rArr; isCheckHeaderValid &rArr; getCRC16 &rArr; rom_crc16_large
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintHeaderInfo
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Header_Check
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Flash_Erase
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Fill_header_info
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CtlInit
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_APP_cmd_dispatch
</UL>

<P><STRONG><a name="[73]"></a>IAP_CMD_SwitchApp_handler</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, iap_application.o(.text.IAP_CMD_SwitchApp_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IAP_CMD_SwitchApp_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_get_us_time
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_create_us_timer
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_APP_cmd_dispatch
</UL>

<P><STRONG><a name="[7d]"></a>IAP_CtlInit</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, iap_application.o(.text.IAP_CtlInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IAP_CtlInit
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CMD_Start_handler
</UL>

<P><STRONG><a name="[7]"></a>IAP_DoUpdate_Delay_Timeout_Callback</STRONG> (Thumb, 102 bytes, Stack size 56 bytes, iap_application.o(.text.IAP_DoUpdate_Delay_Timeout_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = IAP_DoUpdate_Delay_Timeout_Callback &rArr; program_fota_metadata &rArr; write_flash &rArr; write_flash0
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_fota_metadata
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_reset
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iap_application.o(.text.IAP_CMD_SwitchApp_handler)
</UL>
<P><STRONG><a name="[7f]"></a>IAP_Fill_header_info</STRONG> (Thumb, 164 bytes, Stack size 4 bytes, iap_application.o(.text.IAP_Fill_header_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = IAP_Fill_header_info
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CMD_Start_handler
</UL>

<P><STRONG><a name="[7e]"></a>IAP_Flash_Erase</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, iap_application.o(.text.IAP_Flash_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = IAP_Flash_Erase &rArr; erase_flash_sector &rArr; program_flash
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_flash_sector
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CMD_Start_handler
</UL>

<P><STRONG><a name="[77]"></a>IAP_Flash_StartAddr_Get</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, iap_application.o(.text.IAP_Flash_StartAddr_Get))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = IAP_Flash_StartAddr_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CMD_FlashWrite_handler
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CMD_FlashRead_handler
</UL>

<P><STRONG><a name="[78]"></a>IAP_Flash_Write</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, iap_application.o(.text.IAP_Flash_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = IAP_Flash_Write &rArr; write_flash &rArr; write_flash0
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CMD_FlashWrite_handler
</UL>

<P><STRONG><a name="[76]"></a>IAP_Flash_offsetAddr_valid_check</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, iap_application.o(.text.IAP_Flash_offsetAddr_valid_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IAP_Flash_offsetAddr_valid_check
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CMD_FlashRead_handler
</UL>

<P><STRONG><a name="[7c]"></a>IAP_Header_Check</STRONG> (Thumb, 630 bytes, Stack size 56 bytes, iap_application.o(.text.IAP_Header_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = IAP_Header_Check &rArr; isCheckHeaderValid &rArr; getCRC16 &rArr; rom_crc16_large
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isCheckHeaderValid
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsUpgradeTypeValid
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsEncryptInfoValid
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCheckInfoValid
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsBlockInfoValid
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_APP_VersionFormatValidCheck
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CMD_Start_handler
</UL>

<P><STRONG><a name="[6]"></a>IAP_Reboot_Delay_Timeout_Callback</STRONG> (Thumb, 38 bytes, Stack size 40 bytes, iap_application.o(.text.IAP_Reboot_Delay_Timeout_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IAP_Reboot_Delay_Timeout_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iap_application.o(.text.IAP_CMD_Reboot_handler)
</UL>
<P><STRONG><a name="[6e]"></a>IsAppCrcValid</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, iap_application.o(.text.IsAppCrcValid))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = IsAppCrcValid &rArr; getCRC16 &rArr; rom_crc16_large
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCRC16
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_APP_cmd_dispatch
</UL>

<P><STRONG><a name="[8a]"></a>IsBlockInfoValid</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, iap_application.o(.text.IsBlockInfoValid))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IsBlockInfoValid
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Header_Check
</UL>

<P><STRONG><a name="[88]"></a>IsCheckInfoValid</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, iap_application.o(.text.IsCheckInfoValid))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IsCheckInfoValid
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Header_Check
</UL>

<P><STRONG><a name="[8b]"></a>IsEncryptInfoValid</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, iap_application.o(.text.IsEncryptInfoValid))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IsEncryptInfoValid
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Header_Check
</UL>

<P><STRONG><a name="[89]"></a>IsUpgradeTypeValid</STRONG> (Thumb, 60 bytes, Stack size 4 bytes, iap_application.o(.text.IsUpgradeTypeValid))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = IsUpgradeTypeValid
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Header_Check
</UL>

<P><STRONG><a name="[7b]"></a>PrintHeaderInfo</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, iap_application.o(.text.PrintHeaderInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = PrintHeaderInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CMD_Start_handler
</UL>

<P><STRONG><a name="[86]"></a>isCheckHeaderValid</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, iap_application.o(.text.isCheckHeaderValid))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = isCheckHeaderValid &rArr; getCRC16 &rArr; rom_crc16_large
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCRC16
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Header_Check
</UL>

<P><STRONG><a name="[8e]"></a>IAP_TransportAttachData</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, iap_transport.o(.text.IAP_TransportAttachData))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IAP_TransportAttachData &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Transport_Dispatch
</UL>

<P><STRONG><a name="[8f]"></a>IAP_TransportCheckBCC</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, iap_transport.o(.text.IAP_TransportCheckBCC))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = IAP_TransportCheckBCC &rArr; IAP_TransportGetBCC
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_TransportGetBCC
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Transport_Dispatch
</UL>

<P><STRONG><a name="[91]"></a>IAP_TransportClearRecvData</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, iap_transport.o(.text.IAP_TransportClearRecvData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IAP_TransportClearRecvData
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_GetAppBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_TransportRecvGotoIdle
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Transport_Init
</UL>

<P><STRONG><a name="[90]"></a>IAP_TransportGetBCC</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, iap_transport.o(.text.IAP_TransportGetBCC))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IAP_TransportGetBCC
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Transport_Send_ACK
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_TransportCheckBCC
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Transport_send_single_pack
</UL>

<P><STRONG><a name="[92]"></a>IAP_TransportRecvGotoIdle</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, iap_transport.o(.text.IAP_TransportRecvGotoIdle))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IAP_TransportRecvGotoIdle &rArr; IAP_TransportClearRecvData
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_TransportClearRecvData
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Transport_Dispatch
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Transport_Init
</UL>

<P><STRONG><a name="[93]"></a>IAP_Transport_Dispatch</STRONG> (Thumb, 814 bytes, Stack size 56 bytes, iap_transport.o(.text.IAP_Transport_Dispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = IAP_Transport_Dispatch &rArr; IAP_TransportCheckBCC &rArr; IAP_TransportGetBCC
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_TransportRecvGotoIdle
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_TransportCheckBCC
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_TransportAttachData
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spi_iap_recv_callback
</UL>

<P><STRONG><a name="[95]"></a>IAP_Transport_Send_ACK</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, iap_transport.o(.text.IAP_Transport_Send_ACK))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = IAP_Transport_Send_ACK &rArr; bsp_spi_iap_send &rArr; peripherals_spi_push_data &rArr; peripherals_spi_dma_to_txfifo &rArr; DMA_PrepareMem2Peripheral &rArr; DMA_GetCtrlConfigDst
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_TransportGetBCC
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spi_iap_send
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spi_iap_recv_callback
</UL>

<P><STRONG><a name="[97]"></a>IAP_Transport_Send_Dummy</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, iap_transport.o(.text.IAP_Transport_Send_Dummy))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = IAP_Transport_Send_Dummy &rArr; bsp_spi_iap_send &rArr; peripherals_spi_push_data &rArr; peripherals_spi_dma_to_txfifo &rArr; DMA_PrepareMem2Peripheral &rArr; DMA_GetCtrlConfigDst
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spi_iap_send
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spi_iap_recv_callback
</UL>

<P><STRONG><a name="[8]"></a>bsp_spi_iap_recv_callback</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, iap_transport.o(.text.bsp_spi_iap_recv_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = bsp_spi_iap_recv_callback &rArr; IAP_Transport_Send_ACK &rArr; bsp_spi_iap_send &rArr; peripherals_spi_push_data &rArr; peripherals_spi_dma_to_txfifo &rArr; DMA_PrepareMem2Peripheral &rArr; DMA_GetCtrlConfigDst
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Transport_Send_Dummy
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Transport_Send_ACK
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Transport_Dispatch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iap_transport.o(.text.IAP_Transport_Init)
</UL>
<P><STRONG><a name="[11a]"></a>bsp_spi_iap_push_rx_data_to_user</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, spi_spi1_read_write_with_dma.o(.text.bsp_spi_iap_push_rx_data_to_user))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bsp_spi_iap_push_rx_data_to_user
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripherals_spi_isr
</UL>

<P><STRONG><a name="[11b]"></a>bsp_spi_ucm_push_rx_data_to_user</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, spi_spi1_read_write_with_dma.o(.text.bsp_spi_ucm_push_rx_data_to_user))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bsp_spi_ucm_push_rx_data_to_user
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripherals_spi_isr
</UL>

<P><STRONG><a name="[116]"></a>peripherals_spi_dma_to_txfifo</STRONG> (Thumb, 50 bytes, Stack size 64 bytes, spi_spi1_read_write_with_dma.o(.text.peripherals_spi_dma_to_txfifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = peripherals_spi_dma_to_txfifo &rArr; DMA_PrepareMem2Peripheral &rArr; DMA_GetCtrlConfigDst
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_PrepareMem2Peripheral
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_EnableChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripherals_spi_push_data
</UL>

<P><STRONG><a name="[9]"></a>peripherals_spi_isr</STRONG> (Thumb, 402 bytes, Stack size 32 bytes, spi_spi1_read_write_with_dma.o(.text.peripherals_spi_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = peripherals_spi_isr &rArr; peripherals_spi_read_data &rArr; peripherals_spi_rxfifo_to_dma &rArr; DMA_PreparePeripheral2Mem &rArr; DMA_GetCtrlConfigSrc
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripherals_spi_read_data
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripherals_spi_push_data
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spi_ucm_push_rx_data_to_user
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spi_iap_push_rx_data_to_user
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO_WriteValue
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apSSP_GetIntRawStatus
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apSSP_ClearIntStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_spi1_read_write_with_dma.o(.text.bsp_spi_iap_init)
</UL>
<P><STRONG><a name="[e2]"></a>peripherals_spi_push_data</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, spi_spi1_read_write_with_dma.o(.text.peripherals_spi_push_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = peripherals_spi_push_data &rArr; peripherals_spi_dma_to_txfifo &rArr; DMA_PrepareMem2Peripheral &rArr; DMA_GetCtrlConfigDst
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripherals_spi_dma_to_txfifo
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apSSP_SetTxDmaEn
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apSSP_SetTransferControlWrTranCnt
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spi_ucm_send
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripherals_spi_isr
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spi_iap_send
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spi_iap_init
</UL>

<P><STRONG><a name="[e1]"></a>peripherals_spi_read_data</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, spi_spi1_read_write_with_dma.o(.text.peripherals_spi_read_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = peripherals_spi_read_data &rArr; peripherals_spi_rxfifo_to_dma &rArr; DMA_PreparePeripheral2Mem &rArr; DMA_GetCtrlConfigSrc
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripherals_spi_rxfifo_to_dma
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apSSP_SetTransferControlRdTranCnt
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apSSP_SetRxDmaEn
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripherals_spi_isr
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spi_iap_init
</UL>

<P><STRONG><a name="[120]"></a>peripherals_spi_rxfifo_to_dma</STRONG> (Thumb, 50 bytes, Stack size 64 bytes, spi_spi1_read_write_with_dma.o(.text.peripherals_spi_rxfifo_to_dma))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = peripherals_spi_rxfifo_to_dma &rArr; DMA_PreparePeripheral2Mem &rArr; DMA_GetCtrlConfigSrc
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_PreparePeripheral2Mem
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_EnableChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripherals_spi_read_data
</UL>

<P><STRONG><a name="[df]"></a>setup_peripherals_spi_module</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, spi_spi1_read_write_with_dma.o(.text.setup_peripherals_spi_module))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = setup_peripherals_spi_module &rArr; apSSP_DeviceParametersSet &rArr; apSSP_Initialize &rArr; apSSP_ResetTxFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apSSP_DeviceParametersSet
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spi_iap_init
</UL>

<P><STRONG><a name="[de]"></a>setup_peripherals_spi_pin</STRONG> (Thumb, 124 bytes, Stack size 56 bytes, spi_spi1_read_write_with_dma.o(.text.setup_peripherals_spi_pin))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = setup_peripherals_spi_pin &rArr; PINCTRL_SelSpiPins &rArr; PINCTRL_SelSpiIn0 &rArr; PINCTRL_SelInput &rArr; PINCTRL_SetPadMux &rArr; set_reg_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ClearClkGateMulti
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINCTRL_SetPadMux
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINCTRL_SelSpiPins
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINCTRL_Pull
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spi_iap_init
</UL>

<P><STRONG><a name="[145]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[144]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>

<P><STRONG><a name="[148]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[147]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[15]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
