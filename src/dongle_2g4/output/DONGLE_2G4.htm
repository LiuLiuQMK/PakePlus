<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\output\DONGLE_2G4.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\output\DONGLE_2G4.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6140002: Last Updated: Wed May  7 14:32:16 2025
<BR><P>
<H3>Maximum Stack Usage =        352 bytes + Unknown(Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
user_packet_handler &rArr; ble_disconnect_handler &rArr; ble_switch_to_2p4g_check &rArr; ing24g_test_do_switch_to_2p4g &rArr; ing2p4g_switch_to_2G4 &rArr; comm_2p4g_start &rArr; ing2p4g_lle_init &rArr; LLEInit &rArr; LLE_RF_INI
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2d]">AAA_Usb_Suspend_Signal_Set</a> from uart_console.o(.text.AAA_Usb_Suspend_Signal_Set) referenced from uart_console.o(.rodata.cmds)
 <LI><a href="#[17]">EventIrqCallBack</a> from app_2g4.o(.ram_code) referenced 2 times from app_2g4.o(.text.ing24g_init)
 <LI><a href="#[e]">IAP_APP_recv_cmd_callback</a> from iap_application.o(.text.IAP_APP_recv_cmd_callback) referenced 2 times from iap_application.o(.text.IAP_Application_Init)
 <LI><a href="#[10]">IAP_DoUpdate_Delay_Timeout_Callback</a> from iap_application.o(.text.IAP_DoUpdate_Delay_Timeout_Callback) referenced 2 times from iap_application.o(.text.IAP_CMD_SwitchApp_handler)
 <LI><a href="#[f]">IAP_Reboot_Delay_Timeout_Callback</a> from iap_application.o(.text.IAP_Reboot_Delay_Timeout_Callback) referenced 2 times from iap_application.o(.text.IAP_CMD_Reboot_handler)
 <LI><a href="#[9]">Override_Handler</a> from startup_ing91600.o(.text) referenced 65 times from startup_ing91600.o(RESET)
 <LI><a href="#[2e]">Printf_Dongle_Status</a> from uart_console.o(.text.Printf_Dongle_Status) referenced from uart_console.o(.rodata.cmds)
 <LI><a href="#[16]">Read_Spi_To_2P4G_Data_Callback_Func</a> from bsp_usb_hid_iap.o(.text.Read_Spi_To_2P4G_Data_Callback_Func) referenced 2 times from bsp_usb_hid_iap.o(.text.bsp_usb_init)
 <LI><a href="#[8]">Reset_Handler</a> from startup_ing91600.o(.text) referenced from startup_ing91600.o(RESET)
 <LI><a href="#[18]">RxPktIrqCallBack</a> from app_2g4.o(.text.RxPktIrqCallBack) referenced 2 times from app_2g4.o(.text.ing24g_init)
 <LI><a href="#[19]">TxPktIrqCallBack</a> from app_2g4.o(.ram_code) referenced 2 times from app_2g4.o(.text.ing24g_init)
 <LI><a href="#[14]">USB_IrqHandler</a> from peripheral_usb.o(.text.USB_IrqHandler) referenced 2 times from bsp_usb_hid_iap.o(.text.bsp_usb_init)
 <LI><a href="#[c]">UserHandler</a> from my_irq.o(.ram_code) referenced from startup_ing91600.o(.text)
 <LI><a href="#[b]">__scatterload</a> from init.o(.text) referenced from startup_ing91600.o(.text)
 <LI><a href="#[d]">app_main</a> from main.o(.text.app_main) referenced from startup_ing91600.o(.text)
 <LI><a href="#[13]">app_mode_switch_callback</a> from app_2g4.o(.text.app_mode_switch_callback) referenced 2 times from app_2g4.o(.text.app_mode_switch_2G4_trigger)
 <LI><a href="#[1b]">att_read_callback</a> from profile.o(.text.att_read_callback) referenced 2 times from profile.o(.text.setup_profile)
 <LI><a href="#[1c]">att_write_callback</a> from profile.o(.text.att_write_callback) referenced 2 times from profile.o(.text.setup_profile)
 <LI><a href="#[15]">bsp_usb_event_handler</a> from bsp_usb_hid_iap.o(.text.bsp_usb_event_handler) referenced 2 times from bsp_usb_hid_iap.o(.text.bsp_usb_init)
 <LI><a href="#[11]">bsp_usb_hid_iap_recv_callback</a> from iap_transport.o(.text.bsp_usb_hid_iap_recv_callback) referenced 2 times from iap_transport.o(.text.IAP_Transport_Init)
 <LI><a href="#[1e]">bsp_usb_hid_ucm_recv_callback</a> from ctrl.o(.text.bsp_usb_hid_ucm_recv_callback) referenced 2 times from ctrl.o(.text.ucm_init)
 <LI><a href="#[47]">cb_assertion</a> from main.o(.text.cb_assertion) referenced from main.o(.rodata.evt_cb_table)
 <LI><a href="#[46]">cb_hard_fault</a> from main.o(.text.cb_hard_fault) referenced from main.o(.rodata.evt_cb_table)
 <LI><a href="#[49]">cb_heap_out_of_mem</a> from main.o(.text.cb_heap_out_of_mem) referenced from main.o(.rodata.evt_cb_table)
 <LI><a href="#[42]">cb_putc</a> from main.o(.text.cb_putc) referenced from main.o(.rodata.evt_cb_table)
 <LI><a href="#[4a]">cb_trace_rtt</a> from trace.o(.text.cb_trace_rtt) referenced from main.o(.rodata.evt_cb_table)
 <LI><a href="#[2b]">cmd_2g4_bond_clear</a> from uart_console.o(.text.cmd_2g4_bond_clear) referenced from uart_console.o(.rodata.cmds)
 <LI><a href="#[2c]">cmd_2g4_bond_init</a> from uart_console.o(.text.cmd_2g4_bond_init) referenced from uart_console.o(.rodata.cmds)
 <LI><a href="#[2a]">cmd_2g4_bond_read</a> from uart_console.o(.text.cmd_2g4_bond_read) referenced from uart_console.o(.rodata.cmds)
 <LI><a href="#[29]">cmd_2g4_bond_write</a> from uart_console.o(.text.cmd_2g4_bond_write) referenced from uart_console.o(.rodata.cmds)
 <LI><a href="#[26]">cmd_ack_one_packet</a> from uart_console.o(.text.cmd_ack_one_packet) referenced from uart_console.o(.rodata.cmds)
 <LI><a href="#[21]">cmd_get_2g4_state</a> from uart_console.o(.text.cmd_get_2g4_state) referenced from uart_console.o(.rodata.cmds)
 <LI><a href="#[22]">cmd_get_2g4_work_mode</a> from uart_console.o(.text.cmd_get_2g4_work_mode) referenced from uart_console.o(.rodata.cmds)
 <LI><a href="#[20]">cmd_help</a> from uart_console.o(.text.cmd_help) referenced 2 times from uart_console.o(.rodata.cmds)
 <LI><a href="#[24]">cmd_rx_continus</a> from uart_console.o(.text.cmd_rx_continus) referenced from uart_console.o(.rodata.cmds)
 <LI><a href="#[23]">cmd_rx_one_packet</a> from uart_console.o(.text.cmd_rx_one_packet) referenced from uart_console.o(.rodata.cmds)
 <LI><a href="#[28]">cmd_shutdown</a> from uart_console.o(.text.cmd_shutdown) referenced from uart_console.o(.rodata.cmds)
 <LI><a href="#[25]">cmd_stop_continus</a> from uart_console.o(.text.cmd_stop_continus) referenced from uart_console.o(.rodata.cmds)
 <LI><a href="#[27]">cmd_test_inst</a> from uart_console.o(.text.cmd_test_inst) referenced from uart_console.o(.rodata.cmds)
 <LI><a href="#[37]">dummy_event_create</a> from noos_impl.o(.text.dummy_event_create) referenced from noos_impl.o(.rodata.driver)
 <LI><a href="#[39]">dummy_event_set</a> from noos_impl.o(.text.dummy_event_set) referenced from noos_impl.o(.rodata.driver)
 <LI><a href="#[38]">dummy_event_wait</a> from noos_impl.o(.text.dummy_event_wait) referenced from noos_impl.o(.rodata.driver)
 <LI><a href="#[3c]">enter_critical</a> from noos_impl.o(.text.enter_critical) referenced from noos_impl.o(.rodata.driver)
 <LI><a href="#[1f]">fputc</a> from main.o(.text.fputc) referenced from printf8.o(i.__0printf$8)
 <LI><a href="#[3b]">free</a> from malloc.o(i.free) referenced from noos_impl.o(.rodata.driver)
 <LI><a href="#[4e]">impl_kv_get</a> from kv_impl.o(.text.impl_kv_get) referenced from kv_impl.o(.rodata.kv_backend)
 <LI><a href="#[4d]">impl_kv_put</a> from kv_impl.o(.text.impl_kv_put) referenced from kv_impl.o(.rodata.kv_backend)
 <LI><a href="#[4c]">impl_kv_remove</a> from kv_impl.o(.text.impl_kv_remove) referenced from kv_impl.o(.rodata.kv_backend)
 <LI><a href="#[4b]">impl_kv_remove_all</a> from kv_impl.o(.text.impl_kv_remove_all) referenced from kv_impl.o(.rodata.kv_backend)
 <LI><a href="#[50]">impl_kv_value_modified_of_key</a> from kv_impl.o(.text.impl_kv_value_modified_of_key) referenced from kv_impl.o(.rodata.kv_backend)
 <LI><a href="#[4f]">impl_kv_visit</a> from kv_impl.o(.text.impl_kv_visit) referenced from kv_impl.o(.rodata.kv_backend)
 <LI><a href="#[1a]">kv_visitor_dump</a> from kv_impl.o(.text.kv_visitor_dump) referenced 2 times from kv_impl.o(.text.kv_do_gc)
 <LI><a href="#[3d]">leave_critical</a> from noos_impl.o(.text.leave_critical) referenced from noos_impl.o(.rodata.driver)
 <LI><a href="#[a]">main</a> from startup_ing91600.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[3a]">malloc</a> from malloc.o(i.malloc) referenced from noos_impl.o(.rodata.driver)
 <LI><a href="#[3e]">noos_start</a> from noos_impl.o(.text.noos_start) referenced from noos_impl.o(.rodata.driver)
 <LI><a href="#[44]">on_deep_sleep_wakeup</a> from main.o(.text.on_deep_sleep_wakeup) referenced from main.o(.rodata.evt_cb_table)
 <LI><a href="#[48]">on_lle_init</a> from main.o(.text.on_lle_init) referenced from main.o(.rodata.evt_cb_table)
 <LI><a href="#[41]">pendsv_isr</a> from noos_impl.o(.text.pendsv_isr) referenced from noos_impl.o(.rodata.driver)
 <LI><a href="#[45]">query_deep_sleep_allowed</a> from main.o(.text.query_deep_sleep_allowed) referenced from main.o(.rodata.evt_cb_table)
 <LI><a href="#[34]">queue_create</a> from noos_impl.o(.text.queue_create) referenced from noos_impl.o(.rodata.driver)
 <LI><a href="#[36]">queue_recv_msg</a> from noos_impl.o(.text.queue_recv_msg) referenced from noos_impl.o(.rodata.driver)
 <LI><a href="#[35]">queue_send_msg</a> from noos_impl.o(.text.queue_send_msg) referenced from noos_impl.o(.rodata.driver)
 <LI><a href="#[43]">setup_profile</a> from profile.o(.text.setup_profile) referenced from main.o(.rodata.evt_cb_table)
 <LI><a href="#[40]">svc_isr</a> from noos_impl.o(.text.svc_isr) referenced from noos_impl.o(.rodata.driver)
 <LI><a href="#[33]">task_create</a> from noos_impl.o(.text.task_create) referenced from noos_impl.o(.rodata.driver)
 <LI><a href="#[3f]">tick_isr</a> from noos_impl.o(.text.tick_isr) referenced from noos_impl.o(.rodata.driver)
 <LI><a href="#[0]">timer_cb_0</a> from noos_impl.o(.text.timer_cb_0) referenced 2 times from noos_impl.o(.data.sw_timers)
 <LI><a href="#[1]">timer_cb_1</a> from noos_impl.o(.text.timer_cb_1) referenced 2 times from noos_impl.o(.data.sw_timers)
 <LI><a href="#[2]">timer_cb_2</a> from noos_impl.o(.text.timer_cb_2) referenced 2 times from noos_impl.o(.data.sw_timers)
 <LI><a href="#[3]">timer_cb_3</a> from noos_impl.o(.text.timer_cb_3) referenced 2 times from noos_impl.o(.data.sw_timers)
 <LI><a href="#[4]">timer_cb_4</a> from noos_impl.o(.text.timer_cb_4) referenced 2 times from noos_impl.o(.data.sw_timers)
 <LI><a href="#[5]">timer_cb_5</a> from noos_impl.o(.text.timer_cb_5) referenced 2 times from noos_impl.o(.data.sw_timers)
 <LI><a href="#[6]">timer_cb_6</a> from noos_impl.o(.text.timer_cb_6) referenced 2 times from noos_impl.o(.data.sw_timers)
 <LI><a href="#[7]">timer_cb_7</a> from noos_impl.o(.text.timer_cb_7) referenced 2 times from noos_impl.o(.data.sw_timers)
 <LI><a href="#[2f]">timer_create</a> from noos_impl.o(.text.timer_create) referenced from noos_impl.o(.rodata.driver)
 <LI><a href="#[32]">timer_delete</a> from noos_impl.o(.text.timer_delete) referenced from noos_impl.o(.rodata.driver)
 <LI><a href="#[30]">timer_start</a> from noos_impl.o(.text.timer_start) referenced from noos_impl.o(.rodata.driver)
 <LI><a href="#[31]">timer_stop</a> from noos_impl.o(.text.timer_stop) referenced from noos_impl.o(.rodata.driver)
 <LI><a href="#[12]">uart_isr</a> from main.o(.text.uart_isr) referenced 2 times from main.o(.text.app_main)
 <LI><a href="#[1d]">user_packet_handler</a> from profile.o(.text.user_packet_handler) referenced 2 times from profile.o(.text.setup_profile)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[198]"></a>att_server_init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_profile
</UL>

<P><STRONG><a name="[19a]"></a>att_server_register_packet_handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_profile
</UL>

<P><STRONG><a name="[1a5]"></a>att_set_db</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
</UL>

<P><STRONG><a name="[12c]"></a>btstack_push_user_runnable</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_mode_switch_2G4_trigger
</UL>

<P><STRONG><a name="[145]"></a>gap_disconnect</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_disconn_trigger
</UL>

<P><STRONG><a name="[193]"></a>gap_set_adv_set_random_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_adv
</UL>

<P><STRONG><a name="[195]"></a>gap_set_ext_adv_data</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_adv
</UL>

<P><STRONG><a name="[13d]"></a>gap_set_ext_adv_enable</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_adv_set
</UL>

<P><STRONG><a name="[194]"></a>gap_set_ext_adv_para</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_adv
</UL>

<P><STRONG><a name="[196]"></a>gap_set_ext_scan_response_data</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_adv
</UL>

<P><STRONG><a name="[199]"></a>hci_add_event_handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_profile
</UL>

<P><STRONG><a name="[131]"></a>kv_get</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_storage_2g4_state_reset
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_storage_2g4_state_read
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_storage_2g4_addr_write
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_storage_2g4_addr_read
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_storage_2g4_state_init
</UL>

<P><STRONG><a name="[18c]"></a>kv_init_backend</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_impl_init
</UL>

<P><STRONG><a name="[134]"></a>kv_put</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_storage_2g4_state_reset
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_storage_2g4_state_init
</UL>

<P><STRONG><a name="[137]"></a>kv_remove</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_storage_2g4_state_reset
</UL>

<P><STRONG><a name="[132]"></a>kv_value_modified_of_key</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_storage_2g4_addr_write
</UL>

<P><STRONG><a name="[71]"></a>ll_malloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing2p4g_malloc_cont_mem
</UL>

<P><STRONG><a name="[124]"></a>platform_config</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[91]"></a>platform_create_us_timer</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CMD_SwitchApp_handler
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CMD_Reboot_handler
</UL>

<P><STRONG><a name="[160]"></a>platform_get_gen_os_driver</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_trace_rtt
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_search
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kv_remove_all
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kv_remove
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kv_put
</UL>

<P><STRONG><a name="[56]"></a>platform_get_us_time</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_rx_one_packet
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSSI_LISTEN
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CMD_SwitchApp_handler
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CMD_Reboot_handler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_mode_switch_callback
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_2g4_loop
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventIrqCallBack
</UL>

<P><STRONG><a name="[80]"></a>platform_printf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_heap_out_of_mem
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_hard_fault
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_assertion
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Transport_Dispatch
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_TransportCheckBCC
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isCheckHeaderValid
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsBlockInfoValid
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAppCrcValid
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Header_Check
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Flash_Write
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Flash_Erase
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_DoUpdate_Delay_Timeout_Callback
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CMD_SwitchApp_handler
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CMD_Start_handler
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CMD_Reboot_handler
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CMD_FlashWrite_handler
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CMD_FlashRead_handler
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_APP_recv_cmd_callback
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_APP_cmd_dispatch
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_APP_AddPayloadData
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_modify_usb_info_result
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usb_hid_ucm_recv_callback
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UCM_Packaging_Dispatch
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UCM_Command_Dispatch_Modify_USB_Info
</UL>

<P><STRONG><a name="[19c]"></a>platform_raise_assertion</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_create
</UL>

<P><STRONG><a name="[99]"></a>platform_reset</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_hard_fault
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_assertion
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Reboot_Delay_Timeout_Callback
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_DoUpdate_Delay_Timeout_Callback
</UL>

<P><STRONG><a name="[123]"></a>platform_set_evt_callback_table</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[126]"></a>platform_set_irq_callback</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usb_init
</UL>

<P><STRONG><a name="[19d]"></a>platform_set_timer</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_delete
</UL>

<P><STRONG><a name="[164]"></a>platform_shutdown</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_shutdown
</UL>

<P><STRONG><a name="[14f]"></a>printf_hexdump</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usb_event_handler
</UL>

<P><STRONG><a name="[51]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))

<P><STRONG><a name="[1ab]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[52]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[73]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1ac]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[1ad]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[1ae]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[1af]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[1b0]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[c]"></a>UserHandler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, my_irq.o(.ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UserHandler &rArr; _2P4G_IrqHandler &rArr; mode_2p4_ble_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_2P4G_IrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ing91600.o(.text)
</UL>
<P><STRONG><a name="[54]"></a>ing2p4g_clear_event_int</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ing_2p4g.o(.ram_code))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventIrqCallBack
</UL>

<P><STRONG><a name="[d0]"></a>ing2p4g_clear_rx_int</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ing_2p4g.o(.ram_code))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxPktIrqCallBack
</UL>

<P><STRONG><a name="[62]"></a>ing2p4g_clear_tx_int</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ing_2p4g.o(.ram_code))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TxPktIrqCallBack
</UL>

<P><STRONG><a name="[63]"></a>LLE_RF_INI</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, ing_2p4g.o(.ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LLE_RF_INI
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLEInit
</UL>

<P><STRONG><a name="[68]"></a>LLE_SPI_WRITE</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ing_2p4g.o(.ram_code))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSSI_LISTEN
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing2p4g_set_channel
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing24g_rf_stop
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLEInit
</UL>

<P><STRONG><a name="[67]"></a>LLEInit</STRONG> (Thumb, 346 bytes, Stack size 16 bytes, ing_2p4g.o(.ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LLEInit &rArr; LLE_RF_INI
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLE_SPI_WRITE
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLE_RF_INI
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing2p4g_lle_init
</UL>

<P><STRONG><a name="[69]"></a>SetCont</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, ing_2p4g.o(.ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SetCont &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing2p4g_start_2p4g_rx
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing2p4g_start_2p4g_tx
</UL>

<P><STRONG><a name="[6c]"></a>CalTime</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, ing_2p4g.o(.ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CalTime
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartEvent
</UL>

<P><STRONG><a name="[6b]"></a>StartEvent</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, ing_2p4g.o(.ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = StartEvent &rArr; CalTime
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalTime
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing2p4g_start_2p4g_rx
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing2p4g_start_2p4g_tx
</UL>

<P><STRONG><a name="[6d]"></a>ing2p4g_start_2p4g_tx</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, ing_2p4g.o(.ram_code), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartEvent
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCont
</UL>

<P><STRONG><a name="[6e]"></a>ing2p4g_lle_init</STRONG> (Thumb, 82 bytes, Stack size 264 bytes, ing_2p4g.o(.ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = ing2p4g_lle_init &rArr; LLEInit &rArr; LLE_RF_INI
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLEInit
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm_2p4g_start
</UL>

<P><STRONG><a name="[55]"></a>ing2p4g_get_rx_data</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, ing_2p4g.o(.ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ing2p4g_get_rx_data &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventIrqCallBack
</UL>

<P><STRONG><a name="[72]"></a>mode_2p4_ble_isr</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, ing_2p4g.o(.ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mode_2p4_ble_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_2P4G_IrqHandler
</UL>

<P><STRONG><a name="[1b1]"></a>ing2p4g_lle_rst</STRONG> (Thumb, 66 bytes, Stack size 4 bytes, ing_2p4g.o(.ram_code), UNUSED)

<P><STRONG><a name="[6f]"></a>ing24g_rf_stop</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, ing_2p4g.o(.ram_code), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLE_SPI_WRITE
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
</UL>

<P><STRONG><a name="[122]"></a>ing2p4g_init_dual_mode</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ing_2p4g.o(.ram_code))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[70]"></a>ing2p4g_malloc_cont_mem</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, ing_2p4g.o(.ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ing2p4g_malloc_cont_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm_2p4g_start
</UL>

<P><STRONG><a name="[165]"></a>ing_ble_2p4g_state_get</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ing_2p4g.o(.ram_code))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_stop_continus
</UL>

<P><STRONG><a name="[1b2]"></a>GotoSleep</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, ing_2p4g.o(.ram_code), UNUSED)

<P><STRONG><a name="[1b3]"></a>WkupSeq</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, ing_2p4g.o(.ram_code), UNUSED)

<P><STRONG><a name="[53]"></a>_2P4G_IrqHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ing_2p4g.o(.ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _2P4G_IrqHandler &rArr; mode_2p4_ble_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode_2p4_ble_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserHandler
</UL>

<P><STRONG><a name="[8]"></a>Reset_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, startup_ing91600.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ing91600.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>main</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, startup_ing91600.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[b]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ing91600.o(.text)
</UL>
<P><STRONG><a name="[1b4]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[74]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_GetPLLClk
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1b5]"></a>___aeabi_memcpy4$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[1b6]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[6a]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;append_data
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_send_msg
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_recv_msg
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_flash_security0
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteNoCheck
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteBlocking
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_TransportAttachData
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Transport_send_single_pack
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_APP_AddPayloadData
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing2p4g_get_rx_data
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_2P4G_Data_Low_Power_Com
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_2P4G_Data_Change_Usb_Data
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCont
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_search
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_do_backup
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UCM_Packaging_Dispatch
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usp_hid_ucm_tx_data_trigger
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usp_hid_iap_tx_data_trigger
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usp_hid_ctl_tx_data_trigger
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Spi_To_2P4G_Data_Callback_Func
</UL>

<P><STRONG><a name="[190]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_recv_msg
</UL>

<P><STRONG><a name="[1b7]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[1b8]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[78]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[1b9]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1ba]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[77]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[96]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Transport_Send_Dummy
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CtlInit
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Break_All
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usp_hid_ucm_rx_data_trigger
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usp_hid_ctl_rx_data_trigger
</UL>

<P><STRONG><a name="[1bb]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[79]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[a0]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Header_Check
</UL>

<P><STRONG><a name="[7a]"></a>strcasecmp</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, strcasecmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = strcasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_command
</UL>

<P><STRONG><a name="[76]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[1bc]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[75]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[1bd]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[7b]"></a>tolower</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tolower.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp
</UL>

<P><STRONG><a name="[1be]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[1bf]"></a>__decompress0</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[2d]"></a>AAA_Usb_Suspend_Signal_Set</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, uart_console.o(.text.AAA_Usb_Suspend_Signal_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AAA_Usb_Suspend_Signal_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usb_Suspend_Signal_Set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_console.o(.rodata.cmds)
</UL>
<P><STRONG><a name="[c4]"></a>Colse_Test</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, app_2g4.o(.text.Colse_Test))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_2P4G_Data_Change_Usb_Data
</UL>

<P><STRONG><a name="[152]"></a>CtlReport_Claer_Func</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bsp_usb_hid_iap.o(.text.CtlReport_Claer_Func))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usb_event_handler
</UL>

<P><STRONG><a name="[c8]"></a>CtlReport_Set_Func</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bsp_usb_hid_iap.o(.text.CtlReport_Set_Func))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_2P4G_Data_Low_Power_Com
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_2P4G_Data_Change_Usb_Data
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usb_event_handler
</UL>

<P><STRONG><a name="[7d]"></a>GIO_EnableRetentionGroupB</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, peripheral_gpio.o(.text.GIO_EnableRetentionGroupB))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GIO_EnableRetentionGroupB &rArr; GIO_MaskedWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO_MaskedWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_shutdown
</UL>

<P><STRONG><a name="[c5]"></a>Get_Usb_Status</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, app_2g4.o(.text.Get_Usb_Status))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_mode_loop
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_2P4G_Data_Low_Power_Com
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_2P4G_Data_Change_Usb_Data
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Spi_To_2P4G_Data_Callback_Func
</UL>

<P><STRONG><a name="[c6]"></a>Get_Usb_Suspend_Signal_Check</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, app_2g4.o(.text.Get_Usb_Suspend_Signal_Check))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_mode_loop
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_2g4_loop
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_2P4G_Data_Low_Power_Com
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_2P4G_Data_Change_Usb_Data
</UL>

<P><STRONG><a name="[c3]"></a>Get_Usb_Suspend_Status</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, app_2g4.o(.text.Get_Usb_Suspend_Status))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_mode_loop
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_2P4G_Data_Low_Power_Com
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_2P4G_Data_Change_Usb_Data
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Spi_To_2P4G_Data_Callback_Func
</UL>

<P><STRONG><a name="[8c]"></a>IAP_Application_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, iap_application.o(.text.IAP_Application_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IAP_Application_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Transport_recv_cmd_callback_register
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Init
</UL>

<P><STRONG><a name="[9b]"></a>IAP_Flash_Unlock</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, iap_flash_wp.o(.text.IAP_Flash_Unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = IAP_Flash_Unlock &rArr; flash_write_protection_set &rArr; flash_write_protection_config
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_protection_set
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_protection_status
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Flash_WP_Init
</UL>

<P><STRONG><a name="[9e]"></a>IAP_Flash_WP_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, iap_flash_wp.o(.text.IAP_Flash_WP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = IAP_Flash_WP_Init &rArr; IAP_Flash_Unlock &rArr; flash_write_protection_set &rArr; flash_write_protection_config
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Flash_Unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Init
</UL>

<P><STRONG><a name="[ae]"></a>IAP_GetAppBuffer</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, iap_application.o(.text.IAP_GetAppBuffer))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_TransportClearRecvData
</UL>

<P><STRONG><a name="[a7]"></a>IAP_Init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, iap_916.o(.text.IAP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = IAP_Init &rArr; bsp_usb_init &rArr; SYSCTRL_GetPLLClk &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usb_init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usb_disable
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Transport_Init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Flash_WP_Init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Application_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_profile
</UL>

<P><STRONG><a name="[a8]"></a>IAP_Transport_Init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, iap_transport.o(.text.IAP_Transport_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IAP_Transport_Init &rArr; IAP_TransportRecvGotoIdle &rArr; IAP_TransportClearRecvData
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usb_hid_iap_recv_callback_register
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_TransportRecvGotoIdle
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_TransportClearRecvData
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Init
</UL>

<P><STRONG><a name="[8d]"></a>IAP_Transport_recv_cmd_callback_register</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, iap_transport.o(.text.IAP_Transport_recv_cmd_callback_register))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Application_Init
</UL>

<P><STRONG><a name="[83]"></a>IAP_Transport_send_single_pack</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, iap_transport.o(.text.IAP_Transport_send_single_pack))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = IAP_Transport_send_single_pack &rArr; bsp_usb_hid_iap_send &rArr; bsp_usp_hid_iap_tx_data_trigger &rArr; USB_SendData &rArr; USB_StartTransfer &rArr; USB_GetTransferSize
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usb_hid_iap_send
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_TransportGetBCC
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_APP_SendACK
</UL>

<P><STRONG><a name="[b5]"></a>Initialize</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ing_2p4g.o(.text.Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm_2p4g_start
</UL>

<P><STRONG><a name="[5d]"></a>Key_Break_All</STRONG> (Thumb, 62 bytes, Stack size 48 bytes, app_2g4.o(.text.Key_Break_All))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Key_Break_All &rArr; Read_Spi_To_2P4G_Data_Callback_User
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_2g4_buffer_init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Spi_To_2P4G_Data_Callback_User
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Return_Connect_Read_Fucn
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Pair_Read_Fucn
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_2P4G_Data_Change_Usb_Data
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventIrqCallBack
</UL>

<P><STRONG><a name="[c1]"></a>LLE_SPI_READ</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ing_2p4g.o(.text.LLE_SPI_READ))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSSI_LISTEN
</UL>

<P><STRONG><a name="[12f]"></a>Open_Test</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, app_2g4.o(.text.Open_Test))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_mode_switch_callback
</UL>

<P><STRONG><a name="[b8]"></a>PINCTRL_EnableAnalog</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, peripheral_pinctrl.o(.text.PINCTRL_EnableAnalog))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PINCTRL_EnableAnalog &rArr; PINCTRL_SetPadMux &rArr; set_reg_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINCTRL_SetPadMux
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINCTRL_Pull
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINCTRL_SelUSB
</UL>

<P><STRONG><a name="[ba]"></a>PINCTRL_Pull</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, peripheral_pinctrl.o(.text.PINCTRL_Pull))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINCTRL_EnableAnalog
</UL>

<P><STRONG><a name="[bb]"></a>PINCTRL_SelUSB</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, peripheral_pinctrl.o(.text.PINCTRL_SelUSB))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PINCTRL_SelUSB &rArr; PINCTRL_EnableAnalog &rArr; PINCTRL_SetPadMux &rArr; set_reg_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINCTRL_EnableAnalog
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_reg_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usb_init
</UL>

<P><STRONG><a name="[b9]"></a>PINCTRL_SetPadMux</STRONG> (Thumb, 254 bytes, Stack size 8 bytes, peripheral_pinctrl.o(.text.PINCTRL_SetPadMux))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PINCTRL_SetPadMux &rArr; set_reg_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;source_id_on_pin
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_reg_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINCTRL_EnableAnalog
</UL>

<P><STRONG><a name="[be]"></a>Printf_2P4G_Status_Func</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_2g4.o(.text.Printf_2P4G_Status_Func))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Printf_Dongle_Status
</UL>

<P><STRONG><a name="[2e]"></a>Printf_Dongle_Status</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, uart_console.o(.text.Printf_Dongle_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Printf_Dongle_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Printf_Usb_Status_Fucn
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Printf_2P4G_Status_Func
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_console.o(.rodata.cmds)
</UL>
<P><STRONG><a name="[bf]"></a>Printf_Usb_Status_Fucn</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_usb_hid_iap.o(.text.Printf_Usb_Status_Fucn))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Printf_Dongle_Status
</UL>

<P><STRONG><a name="[c0]"></a>RSSI_LISTEN</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, ing_2p4g.o(.text.RSSI_LISTEN))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RSSI_LISTEN
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_get_us_time
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLE_SPI_WRITE
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLE_SPI_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_test_inst
</UL>

<P><STRONG><a name="[c2]"></a>Read_2P4G_Data_Change_Usb_Data</STRONG> (Thumb, 706 bytes, Stack size 16 bytes, app_2g4.o(.text.Read_2P4G_Data_Change_Usb_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Read_2P4G_Data_Change_Usb_Data &rArr; Key_Break_All &rArr; Read_Spi_To_2P4G_Data_Callback_User
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_remote_wakeup
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing2p4g_set_rx_timeout
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_2g4_buffer_rev_add
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usb_Suspend_Signal_Claer
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Return_Back_Init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBusy_Claer_Func
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Break_All
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Usb_Suspend_Status
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Usb_Suspend_Signal_Check
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Usb_Status
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtlReport_Set_Func
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Colse_Test
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_2g4_buffer_full
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave_rx_data_handle
</UL>

<P><STRONG><a name="[cd]"></a>Read_2P4G_Data_Low_Power_Com</STRONG> (Thumb, 400 bytes, Stack size 16 bytes, app_2g4.o(.text.Read_2P4G_Data_Low_Power_Com))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Read_2P4G_Data_Low_Power_Com &rArr; usb_remote_wakeup &rArr; bsp_usb_device_remote_wakeup &rArr; USB_DeviceSetRemoteWakeupBit &rArr; USB_PCStopPhyClcok
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_remote_wakeup
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing2p4g_set_rx_timeout
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_2g4_buffer_rev_add
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usb_Suspend_Signal_Claer
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Return_Back_Init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBusy_Claer_Func
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Usb_Suspend_Status
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Usb_Suspend_Signal_Check
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Usb_Status
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtlReport_Set_Func
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_2g4_buffer_full
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave_rx_data_handle
</UL>

<P><STRONG><a name="[15b]"></a>Read_Spi_To_2P4G_Data_Callback_register</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, app_2g4.o(.text.Read_Spi_To_2P4G_Data_Callback_register))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usb_init
</UL>

<P><STRONG><a name="[d1]"></a>SEGGER_RTT_GetAvailWriteSpace</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, trace.o(.text.SEGGER_RTT_GetAvailWriteSpace))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SEGGER_RTT_GetAvailWriteSpace
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetAvailWriteSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_trace_rtt
</UL>

<P><STRONG><a name="[d3]"></a>SEGGER_RTT_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, trace.o(.text.SEGGER_RTT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SEGGER_RTT_Init &rArr; _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_rtt_init
</UL>

<P><STRONG><a name="[d5]"></a>SEGGER_RTT_Write</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, trace.o(.text.SEGGER_RTT_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_trace_rtt
</UL>

<P><STRONG><a name="[d6]"></a>SEGGER_RTT_WriteNoLock</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, trace.o(.text.SEGGER_RTT_WriteNoLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteNoCheck
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteBlocking
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetAvailWriteSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>

<P><STRONG><a name="[dc]"></a>SYSCTRL_ClearClkGate</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, peripheral_sysctrl.o(.text.SYSCTRL_ClearClkGate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SYSCTRL_ClearClkGate &rArr; SYSCTRL_ClkGateCtrl &rArr; set_reg_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ClkGateCtrl
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ClearClkGateMulti
</UL>

<P><STRONG><a name="[de]"></a>SYSCTRL_ClearClkGateMulti</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, peripheral_sysctrl.o(.text.SYSCTRL_ClearClkGateMulti))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SYSCTRL_ClearClkGateMulti &rArr; SYSCTRL_ClearClkGate &rArr; SYSCTRL_ClkGateCtrl &rArr; set_reg_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ClearClkGate
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_peripherals
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usb_init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usb_disable
</UL>

<P><STRONG><a name="[df]"></a>SYSCTRL_GetPLLClk</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, peripheral_sysctrl.o(.text.SYSCTRL_GetPLLClk))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SYSCTRL_GetPLLClk &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_GetSlowClk
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usb_init
</UL>

<P><STRONG><a name="[e0]"></a>SYSCTRL_GetSlowClk</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, peripheral_sysctrl.o(.text.SYSCTRL_GetSlowClk))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_GetPLLClk
</UL>

<P><STRONG><a name="[e1]"></a>SYSCTRL_ICacheControl</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, peripheral_sysctrl.o(.text.SYSCTRL_ICacheControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SYSCTRL_ICacheControl &rArr; SYSCTRL_CacheControl0 &rArr; set_reg_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_CacheControl0
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_flash_security
</UL>

<P><STRONG><a name="[e2]"></a>SYSCTRL_Init</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, peripheral_sysctrl.o(.text.SYSCTRL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = SYSCTRL_Init &rArr; flash_get_factory_calib_data &rArr; flash_prepare_factory_data &rArr; copy_security_data &rArr; read_flash_security &rArr; SYSCTRL_ICacheControl &rArr; SYSCTRL_CacheControl0 &rArr; set_reg_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_get_factory_calib_data
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_SetLDOOutput
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_reg_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[e5]"></a>SYSCTRL_SelectUSBClk</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, peripheral_sysctrl.o(.text.SYSCTRL_SelectUSBClk))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SYSCTRL_SelectUSBClk &rArr; set_reg_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_reg_bits
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_reg_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usb_init
</UL>

<P><STRONG><a name="[e6]"></a>SYSCTRL_SetClkGate</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, peripheral_sysctrl.o(.text.SYSCTRL_SetClkGate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SYSCTRL_SetClkGate &rArr; SYSCTRL_ClkGateCtrl &rArr; set_reg_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ClkGateCtrl
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_SetClkGateMulti
</UL>

<P><STRONG><a name="[e7]"></a>SYSCTRL_SetClkGateMulti</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, peripheral_sysctrl.o(.text.SYSCTRL_SetClkGateMulti))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SYSCTRL_SetClkGateMulti &rArr; SYSCTRL_SetClkGate &rArr; SYSCTRL_ClkGateCtrl &rArr; set_reg_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_SetClkGate
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usb_disable
</UL>

<P><STRONG><a name="[e4]"></a>SYSCTRL_SetLDOOutput</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, peripheral_sysctrl.o(.text.SYSCTRL_SetLDOOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SYSCTRL_SetLDOOutput &rArr; set_reg_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_reg_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_Init
</UL>

<P><STRONG><a name="[14a]"></a>SYSCTRL_USBPhyConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, peripheral_sysctrl.o(.text.SYSCTRL_USBPhyConfig))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usb_init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usb_disable
</UL>

<P><STRONG><a name="[c9]"></a>SendBusy_Claer_Func</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, bsp_usb_hid_iap.o(.text.SendBusy_Claer_Func))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_2P4G_Data_Low_Power_Com
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_2P4G_Data_Change_Usb_Data
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usb_event_handler
</UL>

<P><STRONG><a name="[5b]"></a>Set_Bond_Mac_Addr_Pir_Init</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, app_2g4.o(.text.Set_Bond_Mac_Addr_Pir_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Set_Bond_Mac_Addr_Pir_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing2p4g_set_access_address
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Pair_Read_Fucn
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventIrqCallBack
</UL>

<P><STRONG><a name="[58]"></a>Set_Return_Back_Init</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, app_2g4.o(.text.Set_Return_Back_Init))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Return_Connect_Read_Fucn
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_2P4G_Data_Low_Power_Com
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_2P4G_Data_Change_Usb_Data
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventIrqCallBack
</UL>

<P><STRONG><a name="[e9]"></a>Test_Send_Data</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, app_2g4.o(.text.Test_Send_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Test_Send_Data &rArr; bsp_usb_hid_ucm_send &rArr; bsp_usp_hid_ucm_tx_data_trigger &rArr; USB_SendData &rArr; USB_StartTransfer &rArr; USB_GetTransferSize
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usb_hid_ucm_send
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usb_hid_ucm_recv_callback
</UL>

<P><STRONG><a name="[15f]"></a>UART_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, peripheral_uart.o(.text.UART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_putc
</UL>

<P><STRONG><a name="[103]"></a>USB_CancelTransfert</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, peripheral_usb.o(.text.USB_CancelTransfert))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DisableEp
</UL>

<P><STRONG><a name="[110]"></a>USB_CheckTransferCondition</STRONG> (Thumb, 126 bytes, Stack size 0 bytes, peripheral_usb.o(.text.USB_CheckTransferCondition))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_IrqHandler
</UL>

<P><STRONG><a name="[f3]"></a>USB_CheckTransferZeroPktCondition</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, peripheral_usb.o(.text.USB_CheckTransferZeroPktCondition))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_CheckTransferZeroPktCondition
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_NewTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_IrqHandler
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HandleEp0
</UL>

<P><STRONG><a name="[f5]"></a>USB_Close</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, peripheral_usb.o(.text.USB_Close))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_Close &rArr; USB_ClrConfig &rArr; USB_SetStallEp
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ResetTransfert
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ClrConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usb_disable
</UL>

<P><STRONG><a name="[f6]"></a>USB_ClrConfig</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, peripheral_usb.o(.text.USB_ClrConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_ClrConfig &rArr; USB_SetStallEp
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetStallEp
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DisableEp
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReInit
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Close
</UL>

<P><STRONG><a name="[fa]"></a>USB_ConfigureEp</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, peripheral_usb.o(.text.USB_ConfigureEp))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_ConfigureEp &rArr; USB_EnableEp
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EnableEp
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usb_event_handler
</UL>

<P><STRONG><a name="[fc]"></a>USB_ContinueTransfer</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, peripheral_usb.o(.text.USB_ContinueTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USB_ContinueTransfer &rArr; USB_GetTransferSize
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_NewTransfer
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetTransferSize
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_IrqHandler
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HandleEp0
</UL>

<P><STRONG><a name="[fe]"></a>USB_CoreReset</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, peripheral_usb.o(.text.USB_CoreReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_CoreReset
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nop
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ResetAndConfig
</UL>

<P><STRONG><a name="[114]"></a>USB_DeviceInitialization</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, peripheral_usb.o(.text.USB_DeviceInitialization))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ResetAndConfig
</UL>

<P><STRONG><a name="[100]"></a>USB_DeviceSetRemoteWakeupBit</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, peripheral_usb.o(.text.USB_DeviceSetRemoteWakeupBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_DeviceSetRemoteWakeupBit &rArr; USB_PCStopPhyClcok
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_PCStopPhyClcok
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usb_device_remote_wakeup
</UL>

<P><STRONG><a name="[115]"></a>USB_DeviceSetThreshold</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, peripheral_usb.o(.text.USB_DeviceSetThreshold))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ResetAndConfig
</UL>

<P><STRONG><a name="[f9]"></a>USB_DisableEp</STRONG> (Thumb, 270 bytes, Stack size 8 bytes, peripheral_usb.o(.text.USB_DisableEp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_DisableEp
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FlushTXFifo
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CancelTransfert
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ClrConfig
</UL>

<P><STRONG><a name="[104]"></a>USB_EP0StatusIn</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, peripheral_usb.o(.text.USB_EP0StatusIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USB_EP0StatusIn &rArr; USB_SendData &rArr; USB_StartTransfer &rArr; USB_GetTransferSize
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SendData
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetSetupPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HandleEp0
</UL>

<P><STRONG><a name="[107]"></a>USB_EP0StatusOut</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, peripheral_usb.o(.text.USB_EP0StatusOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USB_EP0StatusOut &rArr; USB_RecvData &rArr; USB_StartTransfer &rArr; USB_GetTransferSize
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_RecvData
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HandleEp0
</UL>

<P><STRONG><a name="[fb]"></a>USB_EnableEp</STRONG> (Thumb, 264 bytes, Stack size 16 bytes, peripheral_usb.o(.text.USB_EnableEp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_EnableEp
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ConfigureEp
</UL>

<P><STRONG><a name="[111]"></a>USB_FlushRXFifo</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, peripheral_usb.o(.text.USB_FlushRXFifo))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ResetAndConfig
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReInit
</UL>

<P><STRONG><a name="[102]"></a>USB_FlushTXFifo</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, peripheral_usb.o(.text.USB_FlushTXFifo))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetStallEp
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ResetAndConfig
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReInit
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DisableEp
</UL>

<P><STRONG><a name="[14b]"></a>USB_GetEp0SetupData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, peripheral_usb.o(.text.USB_GetEp0SetupData))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usb_event_handler
</UL>

<P><STRONG><a name="[10a]"></a>USB_GetMaxPacketSize</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, peripheral_usb.o(.text.USB_GetMaxPacketSize))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetTransferSize
</UL>

<P><STRONG><a name="[109]"></a>USB_GetMaxTransferSize</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, peripheral_usb.o(.text.USB_GetMaxTransferSize))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetTransferSize
</UL>

<P><STRONG><a name="[106]"></a>USB_GetSetupPacket</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, peripheral_usb.o(.text.USB_GetSetupPacket))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetEp0Stall
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_IrqHandler
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HandleEp0
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP0StatusIn
</UL>

<P><STRONG><a name="[fd]"></a>USB_GetTransferSize</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, peripheral_usb.o(.text.USB_GetTransferSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_GetTransferSize
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetMaxTransferSize
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetMaxPacketSize
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_StartTransfer
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ContinueTransfer
</UL>

<P><STRONG><a name="[10b]"></a>USB_HandleEp0</STRONG> (Thumb, 296 bytes, Stack size 32 bytes, peripheral_usb.o(.text.USB_HandleEp0))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = USB_HandleEp0 &rArr; USB_EP0StatusIn &rArr; USB_SendData &rArr; USB_StartTransfer &rArr; USB_GetTransferSize
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetEp0Stall
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_RecvData
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetSetupPacket
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP0StatusOut
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP0StatusIn
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ContinueTransfer
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CheckTransferZeroPktCondition
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_IrqHandler
</UL>

<P><STRONG><a name="[10d]"></a>USB_InitConfig</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, peripheral_usb.o(.text.USB_InitConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_InitConfig &rArr; USB_ResetAndConfig &rArr; USB_CoreReset
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ResetAndConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usb_init
</UL>

<P><STRONG><a name="[14]"></a>USB_IrqHandler</STRONG> (Thumb, 734 bytes, Stack size 48 bytes, peripheral_usb.o(.text.USB_IrqHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = USB_IrqHandler &rArr; USB_HandleEp0 &rArr; USB_EP0StatusIn &rArr; USB_SendData &rArr; USB_StartTransfer &rArr; USB_GetTransferSize
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReInit
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_PCStopPhyClcok
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HandleEp0
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetSetupPacket
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ContinueTransfer
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CheckTransferZeroPktCondition
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CheckTransferCondition
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_usb_hid_iap.o(.text.bsp_usb_init)
</UL>
<P><STRONG><a name="[155]"></a>USB_IsEpStall</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, peripheral_usb.o(.text.USB_IsEpStall))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usb_event_handler
</UL>

<P><STRONG><a name="[f4]"></a>USB_NewTransfer</STRONG> (Thumb, 222 bytes, Stack size 0 bytes, peripheral_usb.o(.text.USB_NewTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_StartTransfer
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ContinueTransfer
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CheckTransferZeroPktCondition
</UL>

<P><STRONG><a name="[101]"></a>USB_PCStopPhyClcok</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, peripheral_usb.o(.text.USB_PCStopPhyClcok))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_PCStopPhyClcok
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nop
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_IrqHandler
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceSetRemoteWakeupBit
</UL>

<P><STRONG><a name="[10f]"></a>USB_ReInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, peripheral_usb.o(.text.USB_ReInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_ReInit &rArr; USB_ClrConfig &rArr; USB_SetStallEp
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ResetTransfert
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FlushTXFifo
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FlushRXFifo
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ClrConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_IrqHandler
</UL>

<P><STRONG><a name="[108]"></a>USB_RecvData</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, peripheral_usb.o(.text.USB_RecvData))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USB_RecvData &rArr; USB_StartTransfer &rArr; USB_GetTransferSize
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_StartTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HandleEp0
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP0StatusOut
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usp_hid_ucm_rx_data_trigger
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usp_hid_ctl_rx_data_trigger
</UL>

<P><STRONG><a name="[10e]"></a>USB_ResetAndConfig</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, peripheral_usb.o(.text.USB_ResetAndConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_ResetAndConfig &rArr; USB_CoreReset
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetupDataFifo
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ResetTransfert
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FlushTXFifo
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FlushRXFifo
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceSetThreshold
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceInitialization
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CoreReset
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_InitConfig
</UL>

<P><STRONG><a name="[f7]"></a>USB_ResetTransfert</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, peripheral_usb.o(.text.USB_ResetTransfert))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ResetAndConfig
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReInit
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Close
</UL>

<P><STRONG><a name="[105]"></a>USB_SendData</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, peripheral_usb.o(.text.USB_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USB_SendData &rArr; USB_StartTransfer &rArr; USB_GetTransferSize
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_StartTransfer
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CheckAutoSendZeroPktFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP0StatusIn
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usp_hid_ucm_tx_data_trigger
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usp_hid_iap_tx_data_trigger
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usp_hid_ctl_tx_data_trigger
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usb_hid_keyboard_basic_report_start
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usb_event_handler
</UL>

<P><STRONG><a name="[10c]"></a>USB_SetEp0Stall</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, peripheral_usb.o(.text.USB_SetEp0Stall))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_SetEp0Stall &rArr; USB_SetStallEp
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetStallEp
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetSetupPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HandleEp0
</UL>

<P><STRONG><a name="[f8]"></a>USB_SetStallEp</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, peripheral_usb.o(.text.USB_SetStallEp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_SetStallEp
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FlushTXFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetEp0Stall
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ClrConfig
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usb_event_handler
</UL>

<P><STRONG><a name="[113]"></a>USB_SetupDataFifo</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, peripheral_usb.o(.text.USB_SetupDataFifo))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ResetAndConfig
</UL>

<P><STRONG><a name="[112]"></a>USB_StartTransfer</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, peripheral_usb.o(.text.USB_StartTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USB_StartTransfer &rArr; USB_GetTransferSize
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_NewTransfer
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetTransferSize
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SendData
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_RecvData
</UL>

<P><STRONG><a name="[151]"></a>Usb_OK_Claer</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, app_2g4.o(.text.Usb_OK_Claer))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usb_event_handler
</UL>

<P><STRONG><a name="[14d]"></a>Usb_OK_Set</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, app_2g4.o(.text.Usb_OK_Set))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usb_event_handler
</UL>

<P><STRONG><a name="[14e]"></a>Usb_Suspend_Signal_Abnormal_Claer</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, app_2g4.o(.text.Usb_Suspend_Signal_Abnormal_Claer))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usb_event_handler
</UL>

<P><STRONG><a name="[153]"></a>Usb_Suspend_Signal_Check_OK</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, app_2g4.o(.text.Usb_Suspend_Signal_Check_OK))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usb_event_handler
</UL>

<P><STRONG><a name="[ca]"></a>Usb_Suspend_Signal_Claer</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, app_2g4.o(.text.Usb_Suspend_Signal_Claer))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_2P4G_Data_Low_Power_Com
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_2P4G_Data_Change_Usb_Data
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usb_event_handler
</UL>

<P><STRONG><a name="[7c]"></a>Usb_Suspend_Signal_Set</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, app_2g4.o(.text.Usb_Suspend_Signal_Set))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AAA_Usb_Suspend_Signal_Set
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_2g4_loop
</UL>

<P><STRONG><a name="[14c]"></a>Usb_Systme_Led_Set</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, app_2g4.o(.text.Usb_Systme_Led_Set))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usb_event_handler
</UL>

<P><STRONG><a name="[60]"></a>User_Init_2P4G</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, app_2g4.o(.text.User_Init_2P4G))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = User_Init_2P4G &rArr; ing2p4g_switch_to_2G4 &rArr; comm_2p4g_start &rArr; ing2p4g_lle_init &rArr; LLEInit &rArr; LLE_RF_INI
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing2p4g_start_2p4g_rx
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing2p4g_get_state
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing2p4g_switch_to_2G4
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing2p4g_set_access_address
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_2g4_hop_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_2g4_bond_init
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave_rx_data_handle
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventIrqCallBack
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usb_event_handler
</UL>

<P><STRONG><a name="[119]"></a>User_Pair_Read_Fucn</STRONG> (Thumb, 530 bytes, Stack size 24 bytes, app_2g4.o(.text.User_Pair_Read_Fucn))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = User_Pair_Read_Fucn &rArr; Key_Break_All &rArr; Read_Spi_To_2P4G_Data_Callback_User
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_storage_2g4_addr_write
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing2p4g_set_access_address
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Bond_Mac_Addr_Pir_Init
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Break_All
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave_rx_data_handle
</UL>

<P><STRONG><a name="[11b]"></a>User_Return_Connect_Read_Fucn</STRONG> (Thumb, 356 bytes, Stack size 16 bytes, app_2g4.o(.text.User_Return_Connect_Read_Fucn))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = User_Return_Connect_Read_Fucn &rArr; Key_Break_All &rArr; Read_Spi_To_2P4G_Data_Callback_User
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_2g4_hop_init
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Return_Back_Init
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Break_All
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave_rx_data_handle
</UL>

<P><STRONG><a name="[ce]"></a>User_Usb_Send_Report</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, bsp_usb_hid_iap.o(.text.User_Usb_Send_Report))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = User_Usb_Send_Report &rArr; bsp_usb_hid_report_send &rArr; bsp_usp_hid_ctl_tx_data_trigger &rArr; USB_SendData &rArr; USB_StartTransfer &rArr; USB_GetTransferSize
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usb_hid_report_send
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usb_hid_keyboard_basic_report_start
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Spi_To_2P4G_Data_Callback_Func
</UL>

<P><STRONG><a name="[11f]"></a>apUART_BaudRateSet</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, peripheral_uart.o(.text.apUART_BaudRateSet))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apUART_Initialize
</UL>

<P><STRONG><a name="[1a0]"></a>apUART_Check_RXFIFO_EMPTY</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, peripheral_uart.o(.text.apUART_Check_RXFIFO_EMPTY))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_isr
</UL>

<P><STRONG><a name="[15e]"></a>apUART_Check_TXFIFO_FULL</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, peripheral_uart.o(.text.apUART_Check_TXFIFO_FULL))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_putc
</UL>

<P><STRONG><a name="[19f]"></a>apUART_Get_all_raw_int_stat</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, peripheral_uart.o(.text.apUART_Get_all_raw_int_stat))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_isr
</UL>

<P><STRONG><a name="[11e]"></a>apUART_Initialize</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, peripheral_uart.o(.text.apUART_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = apUART_Initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apUART_BaudRateSet
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_uart
</UL>

<P><STRONG><a name="[b7]"></a>app_2g4_buffer_init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, app_2g4.o(.text.app_2g4_buffer_init))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Break_All
</UL>

<P><STRONG><a name="[cc]"></a>app_2g4_buffer_rev_add</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, app_2g4.o(.text.app_2g4_buffer_rev_add))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_2P4G_Data_Low_Power_Com
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_2P4G_Data_Change_Usb_Data
</UL>

<P><STRONG><a name="[cf]"></a>app_2g4_buffer_send_add</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, app_2g4.o(.text.app_2g4_buffer_send_add))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Spi_To_2P4G_Data_Callback_Func
</UL>

<P><STRONG><a name="[5f]"></a>app_2g4_channel_hop</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, app_2g4.o(.text.app_2g4_channel_hop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_2g4_channel_hop &rArr; ing2p4g_set_channel
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing2p4g_set_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_2g4_channel_hop_begin
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventIrqCallBack
</UL>

<P><STRONG><a name="[5a]"></a>app_2g4_channel_hop_begin</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, app_2g4.o(.text.app_2g4_channel_hop_begin))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_2g4_channel_hop_begin &rArr; app_2g4_channel_hop &rArr; ing2p4g_set_channel
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing2p4g_set_rx_timeout
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_2g4_channel_hop
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventIrqCallBack
</UL>

<P><STRONG><a name="[5c]"></a>app_2g4_hop_init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, app_2g4.o(.text.app_2g4_hop_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_2g4_hop_init &rArr; ing2p4g_set_channel
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing2p4g_set_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Init_2P4G
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing24g_test_do_switch_to_2p4g
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Return_Connect_Read_Fucn
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventIrqCallBack
</UL>

<P><STRONG><a name="[121]"></a>app_2g4_loop</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, app_2g4.o(.text.app_2g4_loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_2g4_loop
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_get_us_time
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usb_Suspend_Signal_Set
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Usb_Suspend_Signal_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_main_loop
</UL>

<P><STRONG><a name="[d]"></a>app_main</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, main.o(.text.app_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = app_main &rArr; SYSCTRL_Init &rArr; flash_get_factory_calib_data &rArr; flash_prepare_factory_data &rArr; copy_security_data &rArr; read_flash_security &rArr; SYSCTRL_ICacheControl &rArr; SYSCTRL_CacheControl0 &rArr; set_reg_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_rtt_init
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_peripherals
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_set_irq_callback
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_set_evt_callback_table
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_config
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_impl_get_driver
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing2p4g_init_dual_mode
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ing91600.o(.text)
</UL>
<P><STRONG><a name="[129]"></a>app_mode_loop</STRONG> (Thumb, 238 bytes, Stack size 8 bytes, app_2g4.o(.text.app_mode_loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_mode_loop &rArr; Read_Spi_To_2P4G_Data_Callback_User
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Usb_Suspend_Status
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Usb_Suspend_Signal_Check
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Usb_Status
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_2g4_buffer_empty
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Spi_To_2P4G_Data_Callback_User
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_main_loop
</UL>

<P><STRONG><a name="[12b]"></a>app_mode_switch_2G4_trigger</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, app_2g4.o(.text.app_mode_switch_2G4_trigger))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_mode_switch_2G4_trigger
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_push_user_runnable
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
</UL>

<P><STRONG><a name="[13]"></a>app_mode_switch_callback</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, app_2g4.o(.text.app_mode_switch_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = app_mode_switch_callback &rArr; mode_switch_to_2p4g_trigger &rArr; ing24g_test_do_switch_to_2p4g &rArr; ing2p4g_switch_to_2G4 &rArr; comm_2p4g_start &rArr; ing2p4g_lle_init &rArr; LLEInit &rArr; LLE_RF_INI
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_get_us_time
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode_switch_to_2p4g_trigger
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing24g_init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_Test
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_2g4.o(.text.app_mode_switch_2G4_trigger)
</UL>
<P><STRONG><a name="[130]"></a>app_storage_2g4_addr_read</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, app_storage.o(.text.app_storage_2g4_addr_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_storage_2g4_addr_read
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_2g4_bond_read
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing24g_test_do_switch_to_2p4g
</UL>

<P><STRONG><a name="[11a]"></a>app_storage_2g4_addr_write</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, app_storage.o(.text.app_storage_2g4_addr_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_storage_2g4_addr_write
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_value_modified_of_key
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_get
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_2g4_bond_write
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Pair_Read_Fucn
</UL>

<P><STRONG><a name="[133]"></a>app_storage_2g4_state_init</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, app_storage.o(.text.app_storage_2g4_state_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_storage_2g4_state_init
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_put
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_get
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_storage_init
</UL>

<P><STRONG><a name="[135]"></a>app_storage_2g4_state_read</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, app_storage.o(.text.app_storage_2g4_state_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_storage_2g4_state_read
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_2g4_bond_read
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing24g_test_do_switch_to_2p4g
</UL>

<P><STRONG><a name="[136]"></a>app_storage_2g4_state_reset</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, app_storage.o(.text.app_storage_2g4_state_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_storage_2g4_state_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_remove
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_put
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_2g4_bond_clear
</UL>

<P><STRONG><a name="[138]"></a>app_storage_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, app_storage.o(.text.app_storage_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = app_storage_init &rArr; kv_impl_init &rArr; kv_do_backup &rArr; write_flash &rArr; write_flash0
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_impl_init
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_storage_2g4_state_init
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_profile
</UL>

<P><STRONG><a name="[149]"></a>bsp_usb_device_remote_wakeup</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, bsp_usb_hid_iap.o(.text.bsp_usb_device_remote_wakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bsp_usb_device_remote_wakeup &rArr; USB_DeviceSetRemoteWakeupBit &rArr; USB_PCStopPhyClcok
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceSetRemoteWakeupBit
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_remote_wakeup
</UL>

<P><STRONG><a name="[97]"></a>bsp_usb_disable</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, bsp_usb_hid_iap.o(.text.bsp_usb_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = bsp_usb_disable &rArr; SYSCTRL_ClearClkGateMulti &rArr; SYSCTRL_ClearClkGate &rArr; SYSCTRL_ClkGateCtrl &rArr; set_reg_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ClearClkGateMulti
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_USBPhyConfig
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_SetClkGateMulti
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Close
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Init
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_DoUpdate_Delay_Timeout_Callback
</UL>

<P><STRONG><a name="[b1]"></a>bsp_usb_hid_iap_recv_callback_register</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bsp_usb_hid_iap.o(.text.bsp_usb_hid_iap_recv_callback_register))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Transport_Init
</UL>

<P><STRONG><a name="[b3]"></a>bsp_usb_hid_iap_send</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, bsp_usb_hid_iap.o(.text.bsp_usb_hid_iap_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = bsp_usb_hid_iap_send &rArr; bsp_usp_hid_iap_tx_data_trigger &rArr; USB_SendData &rArr; USB_StartTransfer &rArr; USB_GetTransferSize
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usp_hid_iap_tx_data_trigger
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Transport_Send_Dummy
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Transport_Send_ACK
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Transport_send_single_pack
</UL>

<P><STRONG><a name="[1a1]"></a>bsp_usb_hid_ucm_recv_callback_register</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bsp_usb_hid_iap.o(.text.bsp_usb_hid_ucm_recv_callback_register))
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucm_init
</UL>

<P><STRONG><a name="[ea]"></a>bsp_usb_hid_ucm_send</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, bsp_usb_hid_iap.o(.text.bsp_usb_hid_ucm_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = bsp_usb_hid_ucm_send &rArr; bsp_usp_hid_ucm_tx_data_trigger &rArr; USB_SendData &rArr; USB_StartTransfer &rArr; USB_GetTransferSize
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usp_hid_ucm_tx_data_trigger
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Send_Data
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_modify_usb_info_result
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usb_ucm_normal_send_result
</UL>

<P><STRONG><a name="[a9]"></a>bsp_usb_init</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, bsp_usb_hid_iap.o(.text.bsp_usb_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = bsp_usb_init &rArr; SYSCTRL_GetPLLClk &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_set_irq_callback
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ClearClkGateMulti
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINCTRL_SelUSB
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_USBPhyConfig
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_SelectUSBClk
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_GetPLLClk
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_InitConfig
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Spi_To_2P4G_Data_Callback_register
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Init
</UL>

<P><STRONG><a name="[42]"></a>cb_putc</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, main.o(.text.cb_putc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cb_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apUART_Check_TXFIFO_FULL
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.rodata.evt_cb_table)
</UL>
<P><STRONG><a name="[4a]"></a>cb_trace_rtt</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, trace.o(.text.cb_trace_rtt))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = cb_trace_rtt &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_get_gen_os_driver
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_GetAvailWriteSpace
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.rodata.evt_cb_table)
</UL>
<P><STRONG><a name="[2b]"></a>cmd_2g4_bond_clear</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, uart_console.o(.text.cmd_2g4_bond_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cmd_2g4_bond_clear &rArr; app_storage_2g4_state_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_storage_2g4_state_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_console.o(.rodata.cmds)
</UL>
<P><STRONG><a name="[2c]"></a>cmd_2g4_bond_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, uart_console.o(.text.cmd_2g4_bond_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = cmd_2g4_bond_init &rArr; User_Init_2P4G &rArr; ing2p4g_switch_to_2G4 &rArr; comm_2p4g_start &rArr; ing2p4g_lle_init &rArr; LLEInit &rArr; LLE_RF_INI
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Init_2P4G
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_console.o(.rodata.cmds)
</UL>
<P><STRONG><a name="[2a]"></a>cmd_2g4_bond_read</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, uart_console.o(.text.cmd_2g4_bond_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cmd_2g4_bond_read &rArr; app_storage_2g4_state_read
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_storage_2g4_state_read
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_storage_2g4_addr_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_console.o(.rodata.cmds)
</UL>
<P><STRONG><a name="[29]"></a>cmd_2g4_bond_write</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, uart_console.o(.text.cmd_2g4_bond_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cmd_2g4_bond_write &rArr; app_storage_2g4_addr_write
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_storage_2g4_addr_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_console.o(.rodata.cmds)
</UL>
<P><STRONG><a name="[26]"></a>cmd_ack_one_packet</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uart_console.o(.text.cmd_ack_one_packet))
<BR>[Address Reference Count : 1]<UL><LI> uart_console.o(.rodata.cmds)
</UL>
<P><STRONG><a name="[21]"></a>cmd_get_2g4_state</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, uart_console.o(.text.cmd_get_2g4_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cmd_get_2g4_state
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing2p4g_get_state
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_console.o(.rodata.cmds)
</UL>
<P><STRONG><a name="[22]"></a>cmd_get_2g4_work_mode</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, uart_console.o(.text.cmd_get_2g4_work_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cmd_get_2g4_work_mode
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing2p4g_get_2g4_work_mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_console.o(.rodata.cmds)
</UL>
<P><STRONG><a name="[20]"></a>cmd_help</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, uart_console.o(.text.cmd_help))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = cmd_help &rArr; tx_data &rArr; puts &rArr; fputc &rArr; cb_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_data
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_command
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_console.o(.rodata.cmds)
</UL>
<P><STRONG><a name="[24]"></a>cmd_rx_continus</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, uart_console.o(.text.cmd_rx_continus))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = cmd_rx_continus &rArr; ing2p4g_start_2p4g_rx &rArr; StartEvent &rArr; CalTime
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing2p4g_start_2p4g_rx
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing2p4g_set_2g4_work_mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_console.o(.rodata.cmds)
</UL>
<P><STRONG><a name="[23]"></a>cmd_rx_one_packet</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, uart_console.o(.text.cmd_rx_one_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = cmd_rx_one_packet &rArr; ing2p4g_start_2p4g_rx &rArr; StartEvent &rArr; CalTime
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_get_us_time
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing2p4g_start_2p4g_rx
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing2p4g_set_2g4_work_mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_console.o(.rodata.cmds)
</UL>
<P><STRONG><a name="[28]"></a>cmd_shutdown</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, uart_console.o(.text.cmd_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cmd_shutdown &rArr; GIO_EnableRetentionGroupB &rArr; GIO_MaskedWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_shutdown
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO_EnableRetentionGroupB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_console.o(.rodata.cmds)
</UL>
<P><STRONG><a name="[25]"></a>cmd_stop_continus</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, uart_console.o(.text.cmd_stop_continus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cmd_stop_continus
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing_ble_2p4g_state_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_console.o(.rodata.cmds)
</UL>
<P><STRONG><a name="[27]"></a>cmd_test_inst</STRONG> (Thumb, 252 bytes, Stack size 8 bytes, uart_console.o(.text.cmd_test_inst))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cmd_test_inst &rArr; RSSI_LISTEN
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSSI_LISTEN
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_console.o(.rodata.cmds)
</UL>
<P><STRONG><a name="[167]"></a>comm_2p4g_start</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, ing_2p4g.o(.text.comm_2p4g_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = comm_2p4g_start &rArr; ing2p4g_lle_init &rArr; LLEInit &rArr; LLE_RF_INI
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing2p4g_malloc_cont_mem
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing2p4g_lle_init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing2p4g_rst
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing2p4g_switch_to_2G4
</UL>

<P><STRONG><a name="[169]"></a>config_uart</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, main.o(.text.config_uart))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = config_uart &rArr; apUART_Initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apUART_Initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_peripherals
</UL>

<P><STRONG><a name="[16a]"></a>console_rx_data</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, uart_console.o(.text.console_rx_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = console_rx_data &rArr; append_data &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;append_data
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_isr
</UL>

<P><STRONG><a name="[16d]"></a>custom_main_loop</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, cust_main.o(.text.custom_main_loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = custom_main_loop &rArr; loop_uart_console &rArr; handle_command &rArr; cmd_help &rArr; tx_data &rArr; puts &rArr; fputc &rArr; cb_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_uart_console
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_mode_loop
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_2g4_loop
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_process
</UL>

<P><STRONG><a name="[9a]"></a>erase_flash_sector</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, eflash.o(.text.erase_flash_sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = erase_flash_sector &rArr; program_flash
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_prepare_factory_data
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_fota_metadata
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Flash_Erase
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_reset
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_do_backup
</UL>

<P><STRONG><a name="[173]"></a>flash_enable_write_protection</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, eflash.o(.text.flash_enable_write_protection))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = flash_enable_write_protection
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_prepare_factory_data
</UL>

<P><STRONG><a name="[e3]"></a>flash_get_factory_calib_data</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, eflash.o(.text.flash_get_factory_calib_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = flash_get_factory_calib_data &rArr; flash_prepare_factory_data &rArr; copy_security_data &rArr; read_flash_security &rArr; SYSCTRL_ICacheControl &rArr; SYSCTRL_CacheControl0 &rArr; set_reg_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_prepare_factory_data
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_Init
</UL>

<P><STRONG><a name="[170]"></a>flash_prepare_factory_data</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, eflash.o(.text.flash_prepare_factory_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = flash_prepare_factory_data &rArr; copy_security_data &rArr; read_flash_security &rArr; SYSCTRL_ICacheControl &rArr; SYSCTRL_CacheControl0 &rArr; set_reg_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_flash_security
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_enable_write_protection
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_flash_sector
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_ft_sum
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_data_ready
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_protection_status
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_security_data
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_get_factory_calib_data
</UL>

<P><STRONG><a name="[9d]"></a>flash_write_protection_set</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, iap_flash_wp.o(.text.flash_write_protection_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = flash_write_protection_set &rArr; flash_write_protection_config
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_protection_config
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Flash_Unlock
</UL>

<P><STRONG><a name="[1f]"></a>fputc</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, main.o(.text.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fputc &rArr; cb_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_putc
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0printf$8)
</UL>
<P><STRONG><a name="[82]"></a>getCRC16</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, crc16.o(.text.getCRC16))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = getCRC16 &rArr; rom_crc16_large
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rom_crc16_large
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isCheckHeaderValid
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAppCrcValid
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CMD_FlashWrite_handler
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_APP_SendACK
</UL>

<P><STRONG><a name="[177]"></a>handle_command</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, uart_console.o(.text.handle_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = handle_command &rArr; cmd_help &rArr; tx_data &rArr; puts &rArr; fputc &rArr; cb_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_help
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_data
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_uart_console
</UL>

<P><STRONG><a name="[178]"></a>hci_cmd_cmpl_user_handler</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, profile.o(.text.hci_cmd_cmpl_user_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hci_cmd_cmpl_user_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_event_command_complete_get_command_opcode
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
</UL>

<P><STRONG><a name="[12d]"></a>ing24g_init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, app_2g4.o(.text.ing24g_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ing24g_init &rArr; ing2p4g_set_irq_callback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing_2p4g_config_init
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing2p4g_set_irq_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_mode_switch_callback
</UL>

<P><STRONG><a name="[57]"></a>ing24g_test_do_switch_to_2p4g</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, app_2g4.o(.text.ing24g_test_do_switch_to_2p4g))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = ing24g_test_do_switch_to_2p4g &rArr; ing2p4g_switch_to_2G4 &rArr; comm_2p4g_start &rArr; ing2p4g_lle_init &rArr; LLEInit &rArr; LLE_RF_INI
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing2p4g_start_2p4g_rx
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_storage_2g4_state_read
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_storage_2g4_addr_read
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing2p4g_switch_to_2G4
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing2p4g_set_access_address
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_2g4_hop_init
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode_switch_to_2p4g_trigger
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_switch_to_2p4g_check
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventIrqCallBack
</UL>

<P><STRONG><a name="[161]"></a>ing2p4g_get_2g4_work_mode</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ing_2p4g.o(.text.ing2p4g_get_2g4_work_mode))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_get_2g4_work_mode
</UL>

<P><STRONG><a name="[117]"></a>ing2p4g_get_state</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ing_2p4g.o(.text.ing2p4g_get_state))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_get_2g4_state
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Init_2P4G
</UL>

<P><STRONG><a name="[185]"></a>ing2p4g_lle_set_parameter</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, ing_2p4g.o(.text.ing2p4g_lle_set_parameter))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing2p4g_switch_to_2G4
</UL>

<P><STRONG><a name="[163]"></a>ing2p4g_set_2g4_work_mode</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, ing_2p4g.o(.text.ing2p4g_set_2g4_work_mode))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_rx_one_packet
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_rx_continus
</UL>

<P><STRONG><a name="[e8]"></a>ing2p4g_set_access_address</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, ing_2p4g.o(.text.ing2p4g_set_access_address))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Init_2P4G
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing24g_test_do_switch_to_2p4g
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Pair_Read_Fucn
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Bond_Mac_Addr_Pir_Init
</UL>

<P><STRONG><a name="[120]"></a>ing2p4g_set_channel</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, ing_2p4g.o(.text.ing2p4g_set_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ing2p4g_set_channel
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLE_SPI_WRITE
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_2g4_hop_init
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_2g4_channel_hop
</UL>

<P><STRONG><a name="[183]"></a>ing2p4g_set_irq_callback</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, ing_2p4g.o(.text.ing2p4g_set_irq_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ing2p4g_set_irq_callback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing24g_init
</UL>

<P><STRONG><a name="[5e]"></a>ing2p4g_set_rx_timeout</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, ing_2p4g.o(.text.ing2p4g_set_rx_timeout))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_2g4_channel_hop_begin
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_2P4G_Data_Low_Power_Com
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_2P4G_Data_Change_Usb_Data
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave_rx_data_handle
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventIrqCallBack
</UL>

<P><STRONG><a name="[61]"></a>ing2p4g_start_2p4g_rx</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, ing_2p4g.o(.text.ing2p4g_start_2p4g_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ing2p4g_start_2p4g_rx &rArr; StartEvent &rArr; CalTime
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartEvent
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCont
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_rx_one_packet
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_rx_continus
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Init_2P4G
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing24g_test_do_switch_to_2p4g
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventIrqCallBack
</UL>

<P><STRONG><a name="[118]"></a>ing2p4g_switch_to_2G4</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, ing_2p4g.o(.text.ing2p4g_switch_to_2G4))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = ing2p4g_switch_to_2G4 &rArr; comm_2p4g_start &rArr; ing2p4g_lle_init &rArr; LLEInit &rArr; LLE_RF_INI
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing2p4g_lle_set_parameter
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm_2p4g_start
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Init_2P4G
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing24g_test_do_switch_to_2p4g
</UL>

<P><STRONG><a name="[184]"></a>ing_2p4g_config_init</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, app_2g4.o(.text.ing_2p4g_config_init))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing24g_init
</UL>

<P><STRONG><a name="[139]"></a>kv_impl_init</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, kv_impl.o(.text.kv_impl_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = kv_impl_init &rArr; kv_do_backup &rArr; write_flash &rArr; write_flash0
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_init_backend
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_reset
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_flash_repair
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_do_backup
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_storage_init
</UL>

<P><STRONG><a name="[16e]"></a>loop_uart_console</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, uart_console.o(.text.loop_uart_console))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = loop_uart_console &rArr; handle_command &rArr; cmd_help &rArr; tx_data &rArr; puts &rArr; fputc &rArr; cb_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_command
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_main_loop
</UL>

<P><STRONG><a name="[12e]"></a>mode_switch_to_2p4g_trigger</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, profile.o(.text.mode_switch_to_2p4g_trigger))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = mode_switch_to_2p4g_trigger &rArr; ing24g_test_do_switch_to_2p4g &rArr; ing2p4g_switch_to_2G4 &rArr; comm_2p4g_start &rArr; ing2p4g_lle_init &rArr; LLEInit &rArr; LLE_RF_INI
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing24g_test_do_switch_to_2p4g
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_status_get
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_mode_switch_callback
</UL>

<P><STRONG><a name="[3e]"></a>noos_start</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, noos_impl.o(.text.noos_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = noos_start
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init_controller (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noos_impl.o(.rodata.driver)
</UL>
<P><STRONG><a name="[44]"></a>on_deep_sleep_wakeup</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, main.o(.text.on_deep_sleep_wakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = on_deep_sleep_wakeup &rArr; setup_peripherals &rArr; config_uart &rArr; apUART_Initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_peripherals
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.rodata.evt_cb_table)
</UL>
<P><STRONG><a name="[48]"></a>on_lle_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(.text.on_lle_init))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.rodata.evt_cb_table)
</UL>
<P><STRONG><a name="[128]"></a>os_impl_get_driver</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, noos_impl.o(.text.os_impl_get_driver))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[41]"></a>pendsv_isr</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, noos_impl.o(.text.pendsv_isr))
<BR>[Address Reference Count : 1]<UL><LI> noos_impl.o(.rodata.driver)
</UL>
<P><STRONG><a name="[16f]"></a>program_flash</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, eflash.o(.text.program_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = program_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_flash_sector
</UL>

<P><STRONG><a name="[98]"></a>program_fota_metadata</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, iap_bootloader.o(.text.program_fota_metadata))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = program_fota_metadata &rArr; write_flash &rArr; write_flash0
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_flash_sector
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_DoUpdate_Delay_Timeout_Callback
</UL>

<P><STRONG><a name="[45]"></a>query_deep_sleep_allowed</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(.text.query_deep_sleep_allowed))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.rodata.evt_cb_table)
</UL>
<P><STRONG><a name="[16c]"></a>read_flash_security</STRONG> (Thumb, 60 bytes, Stack size 80 bytes, eflash.o(.text.read_flash_security))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = read_flash_security &rArr; SYSCTRL_ICacheControl &rArr; SYSCTRL_CacheControl0 &rArr; set_reg_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ICacheControl
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_flash_security0
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_prepare_factory_data
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_security_data
</UL>

<P><STRONG><a name="[176]"></a>rom_crc16_large</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, crc16.o(.text.rom_crc16_large))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rom_crc16_large
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCRC16
</UL>

<P><STRONG><a name="[125]"></a>setup_peripherals</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, main.o(.text.setup_peripherals))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = setup_peripherals &rArr; config_uart &rArr; apUART_Initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_uart
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ClearClkGateMulti
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_deep_sleep_wakeup
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[43]"></a>setup_profile</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, profile.o(.text.setup_profile))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = setup_profile &rArr; app_storage_init &rArr; kv_impl_init &rArr; kv_do_backup &rArr; write_flash &rArr; write_flash0
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucm_init
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_add_event_handler
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_register_packet_handler
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_init
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_storage_init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.rodata.evt_cb_table)
</UL>
<P><STRONG><a name="[40]"></a>svc_isr</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, noos_impl.o(.text.svc_isr))
<BR>[Address Reference Count : 1]<UL><LI> noos_impl.o(.rodata.driver)
</UL>
<P><STRONG><a name="[3f]"></a>tick_isr</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, noos_impl.o(.text.tick_isr))
<BR>[Address Reference Count : 1]<UL><LI> noos_impl.o(.rodata.driver)
</UL>
<P><STRONG><a name="[127]"></a>trace_rtt_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, trace.o(.text.trace_rtt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = trace_rtt_init &rArr; SEGGER_RTT_Init &rArr; _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[12]"></a>uart_isr</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, main.o(.text.uart_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = uart_isr &rArr; console_rx_data &rArr; append_data &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_rx_data
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apUART_Get_all_raw_int_stat
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apUART_Check_RXFIFO_EMPTY
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.app_main)
</UL>
<P><STRONG><a name="[197]"></a>ucm_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ctrl.o(.text.ucm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ucm_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usb_hid_ucm_recv_callback_register
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_profile
</UL>

<P><STRONG><a name="[c7]"></a>usb_remote_wakeup</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, app_2g4.o(.text.usb_remote_wakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = usb_remote_wakeup &rArr; bsp_usb_device_remote_wakeup &rArr; USB_DeviceSetRemoteWakeupBit &rArr; USB_PCStopPhyClcok
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usb_device_remote_wakeup
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_2P4G_Data_Low_Power_Com
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_2P4G_Data_Change_Usb_Data
</UL>

<P><STRONG><a name="[9f]"></a>write_flash</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, eflash.o(.text.write_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = write_flash &rArr; write_flash0
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash0
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_ft_sum
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_security_data
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_fota_metadata
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Flash_Write
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_do_backup
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_do_append_key
</UL>

<P><STRONG><a name="[1a6]"></a>write_flash0</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, eflash.o(.text.write_flash0))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = write_flash0
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash
</UL>

<P><STRONG><a name="[1a7]"></a>__0printf$8</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1c0]"></a>__1printf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)

<P><STRONG><a name="[166]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_test_inst
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing2p4g_set_irq_callback
</UL>

<P><STRONG><a name="[1c1]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1c2]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1c3]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[3b]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noos_impl.o(.rodata.driver)
</UL>
<P><STRONG><a name="[3a]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noos_impl.o(.rodata.driver)
</UL>
<P><STRONG><a name="[19e]"></a>puts</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, puts.o(i.puts))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = puts &rArr; fputc &rArr; cb_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_data
</UL>

<P><STRONG><a name="[18e]"></a>platform_init_controller</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;noos_start (via Veneer)
</UL>

<P><STRONG><a name="[18f]"></a>platform_controller_run</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_recv_msg (via Veneer)
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[47]"></a>cb_assertion</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, main.o(.text.cb_assertion))
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_reset
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.rodata.evt_cb_table)
</UL>
<P><STRONG><a name="[46]"></a>cb_hard_fault</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, main.o(.text.cb_hard_fault))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cb_hard_fault
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_reset
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.rodata.evt_cb_table)
</UL>
<P><STRONG><a name="[49]"></a>cb_heap_out_of_mem</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, main.o(.text.cb_heap_out_of_mem))
<BR><BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.rodata.evt_cb_table)
</UL>
<P><STRONG><a name="[1b]"></a>att_read_callback</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, profile.o(.text.att_read_callback))
<BR>[Address Reference Count : 1]<UL><LI> profile.o(.text.setup_profile)
</UL>
<P><STRONG><a name="[1c]"></a>att_write_callback</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, profile.o(.text.att_write_callback))
<BR>[Address Reference Count : 1]<UL><LI> profile.o(.text.setup_profile)
</UL>
<P><STRONG><a name="[13b]"></a>ble_adv_set</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, profile.o(.text.ble_adv_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_adv_set
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_set_ext_adv_enable
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_status_set
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_adv
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_disconnect_handler
</UL>

<P><STRONG><a name="[13e]"></a>ble_adv_set_complete_handler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, profile.o(.text.ble_adv_set_complete_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_adv_set_complete_handler &rArr; ble_adv_startted_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_adv_startted_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
</UL>

<P><STRONG><a name="[13f]"></a>ble_adv_startted_handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, profile.o(.text.ble_adv_startted_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_adv_startted_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_status_set
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_adv_set_complete_handler
</UL>

<P><STRONG><a name="[140]"></a>ble_adv_stopped_handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, profile.o(.text.ble_adv_stopped_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = ble_adv_stopped_handler &rArr; ble_switch_to_2p4g_check &rArr; ing24g_test_do_switch_to_2p4g &rArr; ing2p4g_switch_to_2G4 &rArr; comm_2p4g_start &rArr; ing2p4g_lle_init &rArr; LLEInit &rArr; LLE_RF_INI
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_switch_to_2p4g_check
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_status_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
</UL>

<P><STRONG><a name="[143]"></a>ble_connect_handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, profile.o(.text.ble_connect_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_connect_handler &rArr; ble_disconn_trigger
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_disconn_trigger
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
</UL>

<P><STRONG><a name="[144]"></a>ble_disconn_trigger</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, profile.o(.text.ble_disconn_trigger))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_disconn_trigger
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_disconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_connect_handler
</UL>

<P><STRONG><a name="[146]"></a>ble_disconnect_handler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, profile.o(.text.ble_disconnect_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = ble_disconnect_handler &rArr; ble_switch_to_2p4g_check &rArr; ing24g_test_do_switch_to_2p4g &rArr; ing2p4g_switch_to_2G4 &rArr; comm_2p4g_start &rArr; ing2p4g_lle_init &rArr; LLEInit &rArr; LLE_RF_INI
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_switch_to_2p4g_check
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_adv_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
</UL>

<P><STRONG><a name="[147]"></a>ble_hci_reset_handler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, profile.o(.text.ble_hci_reset_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ble_hci_reset_handler &rArr; ing2p4g_switch_to_ble_mode_complete &rArr; setup_adv &rArr; ble_adv_set
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing2p4g_switch_to_ble_mode_complete
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
</UL>

<P><STRONG><a name="[141]"></a>ble_status_clear</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, profile.o(.text.ble_status_clear))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_adv_stopped_handler
</UL>

<P><STRONG><a name="[18d]"></a>ble_status_get</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, profile.o(.text.ble_status_get))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode_switch_to_2p4g_trigger
</UL>

<P><STRONG><a name="[13c]"></a>ble_status_set</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, profile.o(.text.ble_status_set))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_adv_startted_handler
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_adv_set
</UL>

<P><STRONG><a name="[142]"></a>ble_switch_to_2p4g_check</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, profile.o(.text.ble_switch_to_2p4g_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = ble_switch_to_2p4g_check &rArr; ing24g_test_do_switch_to_2p4g &rArr; ing2p4g_switch_to_2G4 &rArr; comm_2p4g_start &rArr; ing2p4g_lle_init &rArr; LLEInit &rArr; LLE_RF_INI
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing24g_test_do_switch_to_2p4g
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_disconnect_handler
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_adv_stopped_handler
</UL>

<P><STRONG><a name="[1a3]"></a>btstack_event_state_get_state</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, profile.o(.text.btstack_event_state_get_state))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
</UL>

<P><STRONG><a name="[179]"></a>hci_event_command_complete_get_command_opcode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, profile.o(.text.hci_event_command_complete_get_command_opcode))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cmd_cmpl_user_handler
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
</UL>

<P><STRONG><a name="[1a4]"></a>hci_event_le_meta_get_subevent_code</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, profile.o(.text.hci_event_le_meta_get_subevent_code))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
</UL>

<P><STRONG><a name="[1a2]"></a>hci_event_packet_get_type</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, profile.o(.text.hci_event_packet_get_type))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
</UL>

<P><STRONG><a name="[148]"></a>ing2p4g_switch_to_ble_mode_complete</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, profile.o(.text.ing2p4g_switch_to_ble_mode_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ing2p4g_switch_to_ble_mode_complete &rArr; setup_adv &rArr; ble_adv_set
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_adv
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hci_reset_handler
</UL>

<P><STRONG><a name="[186]"></a>setup_adv</STRONG> (Thumb, 104 bytes, Stack size 56 bytes, profile.o(.text.setup_adv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = setup_adv &rArr; ble_adv_set
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_set_ext_scan_response_data
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_set_ext_adv_para
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_set_ext_adv_data
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_set_adv_set_random_addr
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_adv_set
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing2p4g_switch_to_ble_mode_complete
</UL>

<P><STRONG><a name="[1d]"></a>user_packet_handler</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, profile.o(.text.user_packet_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = user_packet_handler &rArr; ble_disconnect_handler &rArr; ble_switch_to_2p4g_check &rArr; ing24g_test_do_switch_to_2p4g &rArr; ing2p4g_switch_to_2G4 &rArr; comm_2p4g_start &rArr; ing2p4g_lle_init &rArr; LLEInit &rArr; LLE_RF_INI
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cmd_cmpl_user_handler
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_set_db
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_mode_switch_2G4_trigger
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_event_packet_get_type
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_event_le_meta_get_subevent_code
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_event_command_complete_get_command_opcode
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_event_state_get_state
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_status_set
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_status_clear
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hci_reset_handler
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_disconnect_handler
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_connect_handler
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_adv_stopped_handler
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_adv_set_complete_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> profile.o(.text.setup_profile)
</UL>
<P><STRONG><a name="[37]"></a>dummy_event_create</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, noos_impl.o(.text.dummy_event_create))
<BR>[Address Reference Count : 1]<UL><LI> noos_impl.o(.rodata.driver)
</UL>
<P><STRONG><a name="[39]"></a>dummy_event_set</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, noos_impl.o(.text.dummy_event_set))
<BR>[Address Reference Count : 1]<UL><LI> noos_impl.o(.rodata.driver)
</UL>
<P><STRONG><a name="[38]"></a>dummy_event_wait</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, noos_impl.o(.text.dummy_event_wait))
<BR>[Address Reference Count : 1]<UL><LI> noos_impl.o(.rodata.driver)
</UL>
<P><STRONG><a name="[3c]"></a>enter_critical</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, noos_impl.o(.text.enter_critical))
<BR>[Address Reference Count : 1]<UL><LI> noos_impl.o(.rodata.driver)
</UL>
<P><STRONG><a name="[17a]"></a>idle_process</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, noos_impl.o(.text.idle_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = idle_process &rArr; custom_main_loop &rArr; loop_uart_console &rArr; handle_command &rArr; cmd_help &rArr; tx_data &rArr; puts &rArr; fputc &rArr; cb_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_main_loop
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_recv_msg
</UL>

<P><STRONG><a name="[3d]"></a>leave_critical</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, noos_impl.o(.text.leave_critical))
<BR>[Address Reference Count : 1]<UL><LI> noos_impl.o(.rodata.driver)
</UL>
<P><STRONG><a name="[34]"></a>queue_create</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, noos_impl.o(.text.queue_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = queue_create &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noos_impl.o(.rodata.driver)
</UL>
<P><STRONG><a name="[36]"></a>queue_recv_msg</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, noos_impl.o(.text.queue_recv_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = queue_recv_msg &rArr; idle_process &rArr; custom_main_loop &rArr; loop_uart_console &rArr; handle_command &rArr; cmd_help &rArr; tx_data &rArr; puts &rArr; fputc &rArr; cb_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_controller_run (via Veneer)
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_process
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noos_impl.o(.rodata.driver)
</UL>
<P><STRONG><a name="[35]"></a>queue_send_msg</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, noos_impl.o(.text.queue_send_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = queue_send_msg &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noos_impl.o(.rodata.driver)
</UL>
<P><STRONG><a name="[33]"></a>task_create</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, noos_impl.o(.text.task_create))
<BR>[Address Reference Count : 1]<UL><LI> noos_impl.o(.rodata.driver)
</UL>
<P><STRONG><a name="[19b]"></a>timer_cb</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, noos_impl.o(.text.timer_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_cb
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cb_7
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cb_6
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cb_5
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cb_4
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cb_3
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cb_2
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cb_1
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cb_0
</UL>

<P><STRONG><a name="[0]"></a>timer_cb_0</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, noos_impl.o(.text.timer_cb_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = timer_cb_0 &rArr; timer_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noos_impl.o(.data.sw_timers)
</UL>
<P><STRONG><a name="[1]"></a>timer_cb_1</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, noos_impl.o(.text.timer_cb_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = timer_cb_1 &rArr; timer_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noos_impl.o(.data.sw_timers)
</UL>
<P><STRONG><a name="[2]"></a>timer_cb_2</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, noos_impl.o(.text.timer_cb_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = timer_cb_2 &rArr; timer_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noos_impl.o(.data.sw_timers)
</UL>
<P><STRONG><a name="[3]"></a>timer_cb_3</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, noos_impl.o(.text.timer_cb_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = timer_cb_3 &rArr; timer_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noos_impl.o(.data.sw_timers)
</UL>
<P><STRONG><a name="[4]"></a>timer_cb_4</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, noos_impl.o(.text.timer_cb_4))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = timer_cb_4 &rArr; timer_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noos_impl.o(.data.sw_timers)
</UL>
<P><STRONG><a name="[5]"></a>timer_cb_5</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, noos_impl.o(.text.timer_cb_5))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = timer_cb_5 &rArr; timer_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noos_impl.o(.data.sw_timers)
</UL>
<P><STRONG><a name="[6]"></a>timer_cb_6</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, noos_impl.o(.text.timer_cb_6))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = timer_cb_6 &rArr; timer_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noos_impl.o(.data.sw_timers)
</UL>
<P><STRONG><a name="[7]"></a>timer_cb_7</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, noos_impl.o(.text.timer_cb_7))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = timer_cb_7 &rArr; timer_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noos_impl.o(.data.sw_timers)
</UL>
<P><STRONG><a name="[2f]"></a>timer_create</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, noos_impl.o(.text.timer_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_create
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_raise_assertion
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noos_impl.o(.rodata.driver)
</UL>
<P><STRONG><a name="[32]"></a>timer_delete</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, noos_impl.o(.text.timer_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = timer_delete
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_set_timer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noos_impl.o(.rodata.driver)
</UL>
<P><STRONG><a name="[30]"></a>timer_start</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, noos_impl.o(.text.timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_start
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_set_timer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noos_impl.o(.rodata.driver)
</UL>
<P><STRONG><a name="[31]"></a>timer_stop</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, noos_impl.o(.text.timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_set_timer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noos_impl.o(.rodata.driver)
</UL>
<P><STRONG><a name="[13a]"></a>append_data</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, uart_console.o(.text.append_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = append_data &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_data
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_rx_data
</UL>

<P><STRONG><a name="[162]"></a>tx_data</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, uart_console.o(.text.tx_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = tx_data &rArr; puts &rArr; fputc &rArr; cb_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;append_data
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_command
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_help
</UL>

<P><STRONG><a name="[9]"></a>Override_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, startup_ing91600.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ing91600.o(RESET)
</UL>
<P><STRONG><a name="[15d]"></a>calc_checksum_32</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, eflash.o(.text.calc_checksum_32))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_ft_sum
</UL>

<P><STRONG><a name="[15c]"></a>calc_ft_sum</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, eflash.o(.text.calc_ft_sum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = calc_ft_sum
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_checksum_32
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_ft_sum
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_data_ready
</UL>

<P><STRONG><a name="[16b]"></a>copy_security_data</STRONG> (Thumb, 92 bytes, Stack size 96 bytes, eflash.o(.text.copy_security_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = copy_security_data &rArr; read_flash_security &rArr; SYSCTRL_ICacheControl &rArr; SYSCTRL_CacheControl0 &rArr; set_reg_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_flash_security
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_prepare_factory_data
</UL>

<P><STRONG><a name="[172]"></a>flash_read_protection_status</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, eflash.o(.text.flash_read_protection_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = flash_read_protection_status
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_prepare_factory_data
</UL>

<P><STRONG><a name="[187]"></a>get_ft_sum</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, eflash.o(.text.get_ft_sum))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_data_ready
</UL>

<P><STRONG><a name="[171]"></a>is_data_ready</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, eflash.o(.text.is_data_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = is_data_ready &rArr; calc_ft_sum
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ft_sum
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_ft_sum
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_prepare_factory_data
</UL>

<P><STRONG><a name="[191]"></a>read_flash_security0</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, eflash.o(.text.read_flash_security0))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = read_flash_security0 &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;security_page_read
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_flash_security
</UL>

<P><STRONG><a name="[192]"></a>security_page_read</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, eflash.o(.text.security_page_read))
<BR><BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_flash_security0
</UL>

<P><STRONG><a name="[174]"></a>write_ft_sum</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, eflash.o(.text.write_ft_sum))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = write_ft_sum &rArr; write_flash &rArr; write_flash0
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_ft_sum
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_prepare_factory_data
</UL>

<P><STRONG><a name="[7e]"></a>GIO_MaskedWrite</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, peripheral_gpio.o(.text.GIO_MaskedWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GIO_MaskedWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO_EnableRetentionGroupB
</UL>

<P><STRONG><a name="[bc]"></a>set_reg_bits</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, peripheral_pinctrl.o(.text.set_reg_bits))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = set_reg_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINCTRL_SetPadMux
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINCTRL_SelUSB
</UL>

<P><STRONG><a name="[bd]"></a>source_id_on_pin</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, peripheral_pinctrl.o(.text.source_id_on_pin))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINCTRL_SetPadMux
</UL>

<P><STRONG><a name="[d9]"></a>SYSCTRL_CacheControl0</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, peripheral_sysctrl.o(.text.SYSCTRL_CacheControl0))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SYSCTRL_CacheControl0 &rArr; set_reg_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_reg_bits
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_reg_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ICacheControl
</UL>

<P><STRONG><a name="[dd]"></a>SYSCTRL_ClkGateCtrl</STRONG> (Thumb, 710 bytes, Stack size 16 bytes, peripheral_sysctrl.o(.text.SYSCTRL_ClkGateCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SYSCTRL_ClkGateCtrl &rArr; set_reg_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_reg_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_SetClkGate
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ClearClkGate
</UL>

<P><STRONG><a name="[da]"></a>set_reg_bit</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, peripheral_sysctrl.o(.text.set_reg_bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = set_reg_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_SelectUSBClk
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ClkGateCtrl
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_CacheControl0
</UL>

<P><STRONG><a name="[db]"></a>set_reg_bits</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, peripheral_sysctrl.o(.text.set_reg_bits))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = set_reg_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_Init
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_SetLDOOutput
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_SelectUSBClk
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_CacheControl0
</UL>

<P><STRONG><a name="[116]"></a>USB_CheckAutoSendZeroPktFlag</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, peripheral_usb.o(.text.USB_CheckAutoSendZeroPktFlag))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SendData
</UL>

<P><STRONG><a name="[ff]"></a>nop</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, peripheral_usb.o(.text.nop))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_PCStopPhyClcok
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CoreReset
</UL>

<P><STRONG><a name="[d4]"></a>_DoInit</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, trace.o(.text._DoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _DoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Init
</UL>

<P><STRONG><a name="[d2]"></a>_GetAvailWriteSpace</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, trace.o(.text._GetAvailWriteSpace))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_GetAvailWriteSpace
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[d7]"></a>_WriteBlocking</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, trace.o(.text._WriteBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[d8]"></a>_WriteNoCheck</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, trace.o(.text._WriteNoCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _WriteNoCheck &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[17]"></a>EventIrqCallBack</STRONG> (Thumb, 292 bytes, Stack size 16 bytes, app_2g4.o(.ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = EventIrqCallBack &rArr; slave_rx_data_handle &rArr; User_Init_2P4G &rArr; ing2p4g_switch_to_2G4 &rArr; comm_2p4g_start &rArr; ing2p4g_lle_init &rArr; LLEInit &rArr; LLE_RF_INI
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_get_us_time
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing2p4g_start_2p4g_rx
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Init_2P4G
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing24g_test_do_switch_to_2p4g
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing2p4g_set_rx_timeout
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing2p4g_get_rx_data
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing2p4g_clear_event_int
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_2g4_hop_init
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_2g4_channel_hop_begin
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_2g4_channel_hop
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Return_Back_Init
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Bond_Mac_Addr_Pir_Init
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Break_All
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave_rx_data_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_2g4.o(.text.ing24g_init)
</UL>
<P><STRONG><a name="[b6]"></a>Read_Spi_To_2P4G_Data_Callback_User</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, app_2g4.o(.text.Read_Spi_To_2P4G_Data_Callback_User))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Read_Spi_To_2P4G_Data_Callback_User
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_mode_loop
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Break_All
</UL>

<P><STRONG><a name="[18]"></a>RxPktIrqCallBack</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, app_2g4.o(.text.RxPktIrqCallBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RxPktIrqCallBack
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing2p4g_clear_rx_int
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_2g4.o(.text.ing24g_init)
</UL>
<P><STRONG><a name="[19]"></a>TxPktIrqCallBack</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, app_2g4.o(.ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TxPktIrqCallBack
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing2p4g_clear_tx_int
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_2g4.o(.text.ing24g_init)
</UL>
<P><STRONG><a name="[12a]"></a>app_2g4_buffer_empty</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, app_2g4.o(.text.app_2g4_buffer_empty))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_mode_loop
</UL>

<P><STRONG><a name="[cb]"></a>app_2g4_buffer_full</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, app_2g4.o(.text.app_2g4_buffer_full))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_2P4G_Data_Low_Power_Com
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_2P4G_Data_Change_Usb_Data
</UL>

<P><STRONG><a name="[59]"></a>slave_rx_data_handle</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, app_2g4.o(.text.slave_rx_data_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = slave_rx_data_handle &rArr; User_Init_2P4G &rArr; ing2p4g_switch_to_2G4 &rArr; comm_2p4g_start &rArr; ing2p4g_lle_init &rArr; LLEInit &rArr; LLE_RF_INI
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Init_2P4G
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing2p4g_set_rx_timeout
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Return_Connect_Read_Fucn
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Pair_Read_Fucn
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_2P4G_Data_Low_Power_Com
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_2P4G_Data_Change_Usb_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventIrqCallBack
</UL>

<P><STRONG><a name="[7f]"></a>IAP_APP_AddPayloadData</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, iap_application.o(.text.IAP_APP_AddPayloadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IAP_APP_AddPayloadData &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_APP_cmd_dispatch
</UL>

<P><STRONG><a name="[86]"></a>IAP_APP_PreparePayloadDataStart</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, iap_application.o(.text.IAP_APP_PreparePayloadDataStart))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_APP_cmd_dispatch
</UL>

<P><STRONG><a name="[81]"></a>IAP_APP_SendACK</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, iap_application.o(.text.IAP_APP_SendACK))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = IAP_APP_SendACK &rArr; IAP_Transport_send_single_pack &rArr; bsp_usb_hid_iap_send &rArr; bsp_usp_hid_iap_tx_data_trigger &rArr; USB_SendData &rArr; USB_StartTransfer &rArr; USB_GetTransferSize
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Transport_send_single_pack
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_APP_recv_cmd_callback
</UL>

<P><STRONG><a name="[a2]"></a>IAP_APP_VersionFormatValidCheck</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, iap_application.o(.text.IAP_APP_VersionFormatValidCheck))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Header_Check
</UL>

<P><STRONG><a name="[84]"></a>IAP_APP_cmd_dispatch</STRONG> (Thumb, 324 bytes, Stack size 24 bytes, iap_application.o(.text.IAP_APP_cmd_dispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = IAP_APP_cmd_dispatch &rArr; IAP_CMD_FlashWrite_handler &rArr; IAP_Flash_Write &rArr; write_flash &rArr; write_flash0
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAppCrcValid
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CMD_SwitchApp_handler
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CMD_Start_handler
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CMD_Reboot_handler
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CMD_FlashWrite_handler
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CMD_FlashRead_handler
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_APP_PreparePayloadDataStart
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_APP_AddPayloadData
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_APP_recv_cmd_callback
</UL>

<P><STRONG><a name="[e]"></a>IAP_APP_recv_cmd_callback</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, iap_application.o(.text.IAP_APP_recv_cmd_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = IAP_APP_recv_cmd_callback &rArr; IAP_APP_SendACK &rArr; IAP_Transport_send_single_pack &rArr; bsp_usb_hid_iap_send &rArr; bsp_usp_hid_iap_tx_data_trigger &rArr; USB_SendData &rArr; USB_StartTransfer &rArr; USB_GetTransferSize
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_APP_cmd_dispatch
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_APP_SendACK
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iap_application.o(.text.IAP_Application_Init)
</UL>
<P><STRONG><a name="[89]"></a>IAP_CMD_FlashRead_handler</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, iap_application.o(.text.IAP_CMD_FlashRead_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IAP_CMD_FlashRead_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Flash_offsetAddr_valid_check
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_APP_cmd_dispatch
</UL>

<P><STRONG><a name="[88]"></a>IAP_CMD_FlashWrite_handler</STRONG> (Thumb, 496 bytes, Stack size 16 bytes, iap_application.o(.text.IAP_CMD_FlashWrite_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = IAP_CMD_FlashWrite_handler &rArr; IAP_Flash_Write &rArr; write_flash &rArr; write_flash0
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Flash_Write
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Flash_StartAddr_Get
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_APP_cmd_dispatch
</UL>

<P><STRONG><a name="[8a]"></a>IAP_CMD_Reboot_handler</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, iap_application.o(.text.IAP_CMD_Reboot_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IAP_CMD_Reboot_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_get_us_time
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_create_us_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_APP_cmd_dispatch
</UL>

<P><STRONG><a name="[87]"></a>IAP_CMD_Start_handler</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, iap_application.o(.text.IAP_CMD_Start_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = IAP_CMD_Start_handler &rArr; IAP_Flash_Erase &rArr; erase_flash_sector &rArr; program_flash
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Header_Check
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Flash_Erase
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Fill_header_info
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CtlInit
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_APP_cmd_dispatch
</UL>

<P><STRONG><a name="[8b]"></a>IAP_CMD_SwitchApp_handler</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, iap_application.o(.text.IAP_CMD_SwitchApp_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IAP_CMD_SwitchApp_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_get_us_time
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_create_us_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_APP_cmd_dispatch
</UL>

<P><STRONG><a name="[93]"></a>IAP_CtlInit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, iap_application.o(.text.IAP_CtlInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IAP_CtlInit
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CMD_Start_handler
</UL>

<P><STRONG><a name="[10]"></a>IAP_DoUpdate_Delay_Timeout_Callback</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, iap_application.o(.text.IAP_DoUpdate_Delay_Timeout_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = IAP_DoUpdate_Delay_Timeout_Callback &rArr; program_fota_metadata &rArr; write_flash &rArr; write_flash0
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_reset
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_fota_metadata
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usb_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iap_application.o(.text.IAP_CMD_SwitchApp_handler)
</UL>
<P><STRONG><a name="[95]"></a>IAP_Fill_header_info</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, iap_application.o(.text.IAP_Fill_header_info))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CMD_Start_handler
</UL>

<P><STRONG><a name="[94]"></a>IAP_Flash_Erase</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, iap_application.o(.text.IAP_Flash_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = IAP_Flash_Erase &rArr; erase_flash_sector &rArr; program_flash
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_flash_sector
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CMD_Start_handler
</UL>

<P><STRONG><a name="[90]"></a>IAP_Flash_StartAddr_Get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, iap_application.o(.text.IAP_Flash_StartAddr_Get))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CMD_FlashWrite_handler
</UL>

<P><STRONG><a name="[8f]"></a>IAP_Flash_Write</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, iap_application.o(.text.IAP_Flash_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = IAP_Flash_Write &rArr; write_flash &rArr; write_flash0
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CMD_FlashWrite_handler
</UL>

<P><STRONG><a name="[8e]"></a>IAP_Flash_offsetAddr_valid_check</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, iap_application.o(.text.IAP_Flash_offsetAddr_valid_check))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CMD_FlashRead_handler
</UL>

<P><STRONG><a name="[92]"></a>IAP_Header_Check</STRONG> (Thumb, 460 bytes, Stack size 8 bytes, iap_application.o(.text.IAP_Header_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IAP_Header_Check &rArr; isCheckHeaderValid &rArr; getCRC16 &rArr; rom_crc16_large
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isCheckHeaderValid
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsUpgradeTypeValid
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsEncryptInfoValid
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCheckInfoValid
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsBlockInfoValid
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_APP_VersionFormatValidCheck
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CMD_Start_handler
</UL>

<P><STRONG><a name="[f]"></a>IAP_Reboot_Delay_Timeout_Callback</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, iap_application.o(.text.IAP_Reboot_Delay_Timeout_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IAP_Reboot_Delay_Timeout_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iap_application.o(.text.IAP_CMD_Reboot_handler)
</UL>
<P><STRONG><a name="[85]"></a>IsAppCrcValid</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, iap_application.o(.text.IsAppCrcValid))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IsAppCrcValid &rArr; getCRC16 &rArr; rom_crc16_large
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_APP_cmd_dispatch
</UL>

<P><STRONG><a name="[a5]"></a>IsBlockInfoValid</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, iap_application.o(.text.IsBlockInfoValid))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IsBlockInfoValid
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Header_Check
</UL>

<P><STRONG><a name="[a3]"></a>IsCheckInfoValid</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, iap_application.o(.text.IsCheckInfoValid))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Header_Check
</UL>

<P><STRONG><a name="[a6]"></a>IsEncryptInfoValid</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, iap_application.o(.text.IsEncryptInfoValid))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Header_Check
</UL>

<P><STRONG><a name="[a4]"></a>IsUpgradeTypeValid</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, iap_application.o(.text.IsUpgradeTypeValid))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Header_Check
</UL>

<P><STRONG><a name="[a1]"></a>isCheckHeaderValid</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, iap_application.o(.text.isCheckHeaderValid))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = isCheckHeaderValid &rArr; getCRC16 &rArr; rom_crc16_large
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Header_Check
</UL>

<P><STRONG><a name="[9c]"></a>flash_read_protection_status</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, iap_flash_wp.o(.text.flash_read_protection_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = flash_read_protection_status
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Flash_Unlock
</UL>

<P><STRONG><a name="[175]"></a>flash_write_protection_config</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, iap_flash_wp.o(.text.flash_write_protection_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = flash_write_protection_config
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_protection_set
</UL>

<P><STRONG><a name="[aa]"></a>IAP_TransportAttachData</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, iap_transport.o(.text.IAP_TransportAttachData))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IAP_TransportAttachData &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Transport_Dispatch
</UL>

<P><STRONG><a name="[ab]"></a>IAP_TransportCheckBCC</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, iap_transport.o(.text.IAP_TransportCheckBCC))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IAP_TransportCheckBCC
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_TransportGetBCC
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Transport_Dispatch
</UL>

<P><STRONG><a name="[ad]"></a>IAP_TransportClearRecvData</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, iap_transport.o(.text.IAP_TransportClearRecvData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IAP_TransportClearRecvData
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_GetAppBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_TransportRecvGotoIdle
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Transport_Init
</UL>

<P><STRONG><a name="[ac]"></a>IAP_TransportGetBCC</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, iap_transport.o(.text.IAP_TransportGetBCC))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Transport_Send_ACK
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_TransportCheckBCC
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Transport_send_single_pack
</UL>

<P><STRONG><a name="[af]"></a>IAP_TransportRecvGotoIdle</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, iap_transport.o(.text.IAP_TransportRecvGotoIdle))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IAP_TransportRecvGotoIdle &rArr; IAP_TransportClearRecvData
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_TransportClearRecvData
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Transport_Dispatch
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Transport_Init
</UL>

<P><STRONG><a name="[b0]"></a>IAP_Transport_Dispatch</STRONG> (Thumb, 508 bytes, Stack size 16 bytes, iap_transport.o(.text.IAP_Transport_Dispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IAP_Transport_Dispatch &rArr; IAP_TransportAttachData &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_TransportRecvGotoIdle
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_TransportCheckBCC
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_TransportAttachData
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usb_hid_iap_recv_callback
</UL>

<P><STRONG><a name="[b2]"></a>IAP_Transport_Send_ACK</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, iap_transport.o(.text.IAP_Transport_Send_ACK))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = IAP_Transport_Send_ACK &rArr; bsp_usb_hid_iap_send &rArr; bsp_usp_hid_iap_tx_data_trigger &rArr; USB_SendData &rArr; USB_StartTransfer &rArr; USB_GetTransferSize
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usb_hid_iap_send
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_TransportGetBCC
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usb_hid_iap_recv_callback
</UL>

<P><STRONG><a name="[b4]"></a>IAP_Transport_Send_Dummy</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, iap_transport.o(.text.IAP_Transport_Send_Dummy))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = IAP_Transport_Send_Dummy &rArr; bsp_usb_hid_iap_send &rArr; bsp_usp_hid_iap_tx_data_trigger &rArr; USB_SendData &rArr; USB_StartTransfer &rArr; USB_GetTransferSize
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usb_hid_iap_send
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usb_hid_iap_recv_callback
</UL>

<P><STRONG><a name="[11]"></a>bsp_usb_hid_iap_recv_callback</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, iap_transport.o(.text.bsp_usb_hid_iap_recv_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = bsp_usb_hid_iap_recv_callback &rArr; IAP_Transport_Send_ACK &rArr; bsp_usb_hid_iap_send &rArr; bsp_usp_hid_iap_tx_data_trigger &rArr; USB_SendData &rArr; USB_StartTransfer &rArr; USB_GetTransferSize
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Transport_Send_Dummy
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Transport_Send_ACK
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Transport_Dispatch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iap_transport.o(.text.IAP_Transport_Init)
</UL>
<P><STRONG><a name="[16]"></a>Read_Spi_To_2P4G_Data_Callback_Func</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, bsp_usb_hid_iap.o(.text.Read_Spi_To_2P4G_Data_Callback_Func))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Read_Spi_To_2P4G_Data_Callback_Func &rArr; User_Usb_Send_Report &rArr; bsp_usb_hid_report_send &rArr; bsp_usp_hid_ctl_tx_data_trigger &rArr; USB_SendData &rArr; USB_StartTransfer &rArr; USB_GetTransferSize
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_2g4_buffer_send_add
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Usb_Suspend_Status
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Usb_Status
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Usb_Send_Report
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_usb_hid_iap.o(.text.bsp_usb_init)
</UL>
<P><STRONG><a name="[15]"></a>bsp_usb_event_handler</STRONG> (Thumb, 1496 bytes, Stack size 24 bytes, bsp_usb_hid_iap.o(.text.bsp_usb_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = bsp_usb_event_handler &rArr; User_Init_2P4G &rArr; ing2p4g_switch_to_2G4 &rArr; comm_2p4g_start &rArr; ing2p4g_lle_init &rArr; LLEInit &rArr; LLE_RF_INI
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Init_2P4G
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_hexdump
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetStallEp
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SendData
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_IsEpStall
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetEp0SetupData
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ConfigureEp
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usb_Systme_Led_Set
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usb_Suspend_Signal_Claer
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usb_Suspend_Signal_Check_OK
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usb_Suspend_Signal_Abnormal_Claer
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usb_OK_Set
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usb_OK_Claer
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBusy_Claer_Func
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtlReport_Set_Func
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtlReport_Claer_Func
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usp_hid_ucm_rx_data_trigger
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usp_hid_ctl_rx_data_trigger
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usb_hid_ucm_push_rx_data_to_user
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usb_hid_iap_push_rx_data_to_user
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_usb_hid_iap.o(.text.bsp_usb_init)
</UL>
<P><STRONG><a name="[157]"></a>bsp_usb_hid_iap_push_rx_data_to_user</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, bsp_usb_hid_iap.o(.text.bsp_usb_hid_iap_push_rx_data_to_user))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bsp_usb_hid_iap_push_rx_data_to_user
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usb_event_handler
</UL>

<P><STRONG><a name="[11c]"></a>bsp_usb_hid_keyboard_basic_report_start</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, bsp_usb_hid_iap.o(.text.bsp_usb_hid_keyboard_basic_report_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = bsp_usb_hid_keyboard_basic_report_start &rArr; USB_SendData &rArr; USB_StartTransfer &rArr; USB_GetTransferSize
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Usb_Send_Report
</UL>

<P><STRONG><a name="[11d]"></a>bsp_usb_hid_report_send</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, bsp_usb_hid_iap.o(.text.bsp_usb_hid_report_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = bsp_usb_hid_report_send &rArr; bsp_usp_hid_ctl_tx_data_trigger &rArr; USB_SendData &rArr; USB_StartTransfer &rArr; USB_GetTransferSize
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usp_hid_ctl_tx_data_trigger
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Usb_Send_Report
</UL>

<P><STRONG><a name="[156]"></a>bsp_usb_hid_ucm_push_rx_data_to_user</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, bsp_usb_hid_iap.o(.text.bsp_usb_hid_ucm_push_rx_data_to_user))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bsp_usb_hid_ucm_push_rx_data_to_user
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usb_event_handler
</UL>

<P><STRONG><a name="[150]"></a>bsp_usp_hid_ctl_rx_data_trigger</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, bsp_usb_hid_iap.o(.text.bsp_usp_hid_ctl_rx_data_trigger))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = bsp_usp_hid_ctl_rx_data_trigger &rArr; USB_RecvData &rArr; USB_StartTransfer &rArr; USB_GetTransferSize
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_RecvData
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usb_event_handler
</UL>

<P><STRONG><a name="[159]"></a>bsp_usp_hid_ctl_tx_data_trigger</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, bsp_usb_hid_iap.o(.text.bsp_usp_hid_ctl_tx_data_trigger))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = bsp_usp_hid_ctl_tx_data_trigger &rArr; USB_SendData &rArr; USB_StartTransfer &rArr; USB_GetTransferSize
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SendData
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usb_hid_report_send
</UL>

<P><STRONG><a name="[158]"></a>bsp_usp_hid_iap_tx_data_trigger</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, bsp_usb_hid_iap.o(.text.bsp_usp_hid_iap_tx_data_trigger))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = bsp_usp_hid_iap_tx_data_trigger &rArr; USB_SendData &rArr; USB_StartTransfer &rArr; USB_GetTransferSize
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SendData
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usb_hid_iap_send
</UL>

<P><STRONG><a name="[154]"></a>bsp_usp_hid_ucm_rx_data_trigger</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, bsp_usb_hid_iap.o(.text.bsp_usp_hid_ucm_rx_data_trigger))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = bsp_usp_hid_ucm_rx_data_trigger &rArr; USB_RecvData &rArr; USB_StartTransfer &rArr; USB_GetTransferSize
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_RecvData
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usb_event_handler
</UL>

<P><STRONG><a name="[15a]"></a>bsp_usp_hid_ucm_tx_data_trigger</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, bsp_usb_hid_iap.o(.text.bsp_usp_hid_ucm_tx_data_trigger))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = bsp_usp_hid_ucm_tx_data_trigger &rArr; USB_SendData &rArr; USB_StartTransfer &rArr; USB_GetTransferSize
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SendData
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usb_hid_ucm_send
</UL>

<P><STRONG><a name="[eb]"></a>UCM_Command_Dispatch</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ctrl.o(.text.UCM_Command_Dispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = UCM_Command_Dispatch &rArr; UCM_Command_Dispatch_Modify_USB_Info &rArr; send_modify_usb_info_result &rArr; bsp_usb_hid_ucm_send &rArr; bsp_usp_hid_ucm_tx_data_trigger &rArr; USB_SendData &rArr; USB_StartTransfer &rArr; USB_GetTransferSize
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UCM_Command_Dispatch_Modify_USB_Info
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UCM_Packaging_Dispatch
</UL>

<P><STRONG><a name="[ec]"></a>UCM_Command_Dispatch_Modify_USB_Info</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, ctrl.o(.text.UCM_Command_Dispatch_Modify_USB_Info))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = UCM_Command_Dispatch_Modify_USB_Info &rArr; send_modify_usb_info_result &rArr; bsp_usb_hid_ucm_send &rArr; bsp_usp_hid_ucm_tx_data_trigger &rArr; USB_SendData &rArr; USB_StartTransfer &rArr; USB_GetTransferSize
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_modify_usb_info_result
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UCM_Command_Dispatch
</UL>

<P><STRONG><a name="[ee]"></a>UCM_Dispatch</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ctrl.o(.text.UCM_Dispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = UCM_Dispatch &rArr; UCM_Packaging_Dispatch &rArr; UCM_Command_Dispatch &rArr; UCM_Command_Dispatch_Modify_USB_Info &rArr; send_modify_usb_info_result &rArr; bsp_usb_hid_ucm_send &rArr; bsp_usp_hid_ucm_tx_data_trigger &rArr; USB_SendData &rArr; USB_StartTransfer &rArr; USB_GetTransferSize
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usb_ucm_normal_send_result
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UCM_Packaging_Dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usb_hid_ucm_recv_callback
</UL>

<P><STRONG><a name="[ef]"></a>UCM_Packaging_Dispatch</STRONG> (Thumb, 380 bytes, Stack size 16 bytes, ctrl.o(.text.UCM_Packaging_Dispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = UCM_Packaging_Dispatch &rArr; UCM_Command_Dispatch &rArr; UCM_Command_Dispatch_Modify_USB_Info &rArr; send_modify_usb_info_result &rArr; bsp_usb_hid_ucm_send &rArr; bsp_usp_hid_ucm_tx_data_trigger &rArr; USB_SendData &rArr; USB_StartTransfer &rArr; USB_GetTransferSize
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_sum_8
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UCM_Packaging_Set_Idle
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UCM_Command_Dispatch
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UCM_Dispatch
</UL>

<P><STRONG><a name="[f2]"></a>UCM_Packaging_Set_Idle</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ctrl.o(.text.UCM_Packaging_Set_Idle))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UCM_Packaging_Dispatch
</UL>

<P><STRONG><a name="[1e]"></a>bsp_usb_hid_ucm_recv_callback</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, ctrl.o(.text.bsp_usb_hid_ucm_recv_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = bsp_usb_hid_ucm_recv_callback &rArr; UCM_Dispatch &rArr; UCM_Packaging_Dispatch &rArr; UCM_Command_Dispatch &rArr; UCM_Command_Dispatch_Modify_USB_Info &rArr; send_modify_usb_info_result &rArr; bsp_usb_hid_ucm_send &rArr; bsp_usp_hid_ucm_tx_data_trigger &rArr; USB_SendData &rArr; USB_StartTransfer &rArr; USB_GetTransferSize
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Send_Data
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UCM_Dispatch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ctrl.o(.text.ucm_init)
</UL>
<P><STRONG><a name="[f0]"></a>bsp_usb_ucm_normal_send_result</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ctrl.o(.text.bsp_usb_ucm_normal_send_result))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = bsp_usb_ucm_normal_send_result &rArr; bsp_usb_hid_ucm_send &rArr; bsp_usp_hid_ucm_tx_data_trigger &rArr; USB_SendData &rArr; USB_StartTransfer &rArr; USB_GetTransferSize
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usb_hid_ucm_send
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_sum_8
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UCM_Dispatch
</UL>

<P><STRONG><a name="[f1]"></a>calc_sum_8</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ctrl.o(.text.calc_sum_8))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_modify_usb_info_result
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usb_ucm_normal_send_result
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UCM_Packaging_Dispatch
</UL>

<P><STRONG><a name="[ed]"></a>send_modify_usb_info_result</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, ctrl.o(.text.send_modify_usb_info_result))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = send_modify_usb_info_result &rArr; bsp_usb_hid_ucm_send &rArr; bsp_usp_hid_ucm_tx_data_trigger &rArr; USB_SendData &rArr; USB_StartTransfer &rArr; USB_GetTransferSize
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usb_hid_ucm_send
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_sum_8
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UCM_Command_Dispatch_Modify_USB_Info
</UL>

<P><STRONG><a name="[17b]"></a>impl_do_kv_visit</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, kv_impl.o(.text.impl_do_kv_visit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = impl_do_kv_visit &rArr; kv_search_flash
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_search_flash
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_search_cache
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_remap_by_type
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_do_gc
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kv_visit
</UL>

<P><STRONG><a name="[4e]"></a>impl_kv_get</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, kv_impl.o(.text.impl_kv_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = impl_kv_get &rArr; kv_search &rArr; kv_search_flash
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_search
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_remap_by_type
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kv_impl.o(.rodata.kv_backend)
</UL>
<P><STRONG><a name="[4d]"></a>impl_kv_put</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, kv_impl.o(.text.impl_kv_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = impl_kv_put &rArr; kv_do_append_key &rArr; kv_do_gc &rArr; kv_do_backup &rArr; write_flash &rArr; write_flash0
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_get_gen_os_driver
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_search
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_do_append_key
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_remap_by_type
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kv_impl.o(.rodata.kv_backend)
</UL>
<P><STRONG><a name="[4c]"></a>impl_kv_remove</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, kv_impl.o(.text.impl_kv_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = impl_kv_remove &rArr; kv_do_remove_key &rArr; kv_do_append_key &rArr; kv_do_gc &rArr; kv_do_backup &rArr; write_flash &rArr; write_flash0
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_get_gen_os_driver
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_search_flash
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_search_cache
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_do_remove_key
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_remap_by_type
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kv_impl.o(.rodata.kv_backend)
</UL>
<P><STRONG><a name="[4b]"></a>impl_kv_remove_all</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, kv_impl.o(.text.impl_kv_remove_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = impl_kv_remove_all &rArr; kv_reset &rArr; erase_flash_sector &rArr; program_flash
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_get_gen_os_driver
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kv_impl.o(.rodata.kv_backend)
</UL>
<P><STRONG><a name="[50]"></a>impl_kv_value_modified_of_key</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, kv_impl.o(.text.impl_kv_value_modified_of_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = impl_kv_value_modified_of_key &rArr; kv_do_append_key &rArr; kv_do_gc &rArr; kv_do_backup &rArr; write_flash &rArr; write_flash0
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_search_cache
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_do_append_key
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_remap_by_type
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kv_impl.o(.rodata.kv_backend)
</UL>
<P><STRONG><a name="[4f]"></a>impl_kv_visit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, kv_impl.o(.text.impl_kv_visit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = impl_kv_visit &rArr; impl_do_kv_visit &rArr; kv_search_flash
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_do_kv_visit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kv_impl.o(.rodata.kv_backend)
</UL>
<P><STRONG><a name="[17c]"></a>key_remap_by_type</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, kv_impl.o(.text.key_remap_by_type))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kv_value_modified_of_key
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kv_remove
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kv_put
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kv_get
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_do_kv_visit
</UL>

<P><STRONG><a name="[180]"></a>kv_do_append_key</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, kv_impl.o(.text.kv_do_append_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = kv_do_append_key &rArr; kv_do_gc &rArr; kv_do_backup &rArr; write_flash &rArr; write_flash0
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_do_gc
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_visitor_dump
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_do_remove_key
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kv_value_modified_of_key
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kv_put
</UL>

<P><STRONG><a name="[189]"></a>kv_do_backup</STRONG> (Thumb, 58 bytes, Stack size 88 bytes, kv_impl.o(.text.kv_do_backup))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = kv_do_backup &rArr; write_flash &rArr; write_flash0
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_flash_sector
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_do_gc
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_impl_init
</UL>

<P><STRONG><a name="[188]"></a>kv_do_gc</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, kv_impl.o(.text.kv_do_gc))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = kv_do_gc &rArr; kv_do_backup &rArr; write_flash &rArr; write_flash0
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_reset
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_do_backup
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_do_kv_visit
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_do_append_key
</UL>

<P><STRONG><a name="[181]"></a>kv_do_remove_key</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, kv_impl.o(.text.kv_do_remove_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = kv_do_remove_key &rArr; kv_do_append_key &rArr; kv_do_gc &rArr; kv_do_backup &rArr; write_flash &rArr; write_flash0
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_do_append_key
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kv_remove
</UL>

<P><STRONG><a name="[18a]"></a>kv_flash_repair</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, kv_impl.o(.text.kv_flash_repair))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = kv_flash_repair
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;next_item
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_impl_init
</UL>

<P><STRONG><a name="[182]"></a>kv_reset</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, kv_impl.o(.text.kv_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = kv_reset &rArr; erase_flash_sector &rArr; program_flash
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_flash_sector
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_do_gc
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kv_remove_all
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_impl_init
</UL>

<P><STRONG><a name="[17f]"></a>kv_search</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, kv_impl.o(.text.kv_search))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = kv_search &rArr; kv_search_flash
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_get_gen_os_driver
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_search_flash
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_search_cache
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kv_put
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kv_get
</UL>

<P><STRONG><a name="[17d]"></a>kv_search_cache</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, kv_impl.o(.text.kv_search_cache))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_search
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kv_value_modified_of_key
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kv_remove
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_do_kv_visit
</UL>

<P><STRONG><a name="[17e]"></a>kv_search_flash</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, kv_impl.o(.text.kv_search_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = kv_search_flash
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;next_item
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_search
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kv_remove
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_do_kv_visit
</UL>

<P><STRONG><a name="[1a]"></a>kv_visitor_dump</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, kv_impl.o(.text.kv_visitor_dump))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = kv_visitor_dump &rArr; kv_do_append_key &rArr; kv_do_gc &rArr; kv_do_backup &rArr; write_flash &rArr; write_flash0
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_do_append_key
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kv_impl.o(.text.kv_do_gc)
</UL>
<P><STRONG><a name="[18b]"></a>next_item</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, kv_impl.o(.text.next_item))
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_search_flash
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_flash_repair
</UL>

<P><STRONG><a name="[65]"></a>__NVIC_ClearPendingIRQ</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ing_2p4g.o(.text.__NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ing24g_rf_stop
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLE_RF_INI
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize
</UL>

<P><STRONG><a name="[64]"></a>__NVIC_DisableIRQ</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ing_2p4g.o(.text.__NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLE_RF_INI
</UL>

<P><STRONG><a name="[66]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ing_2p4g.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLE_RF_INI
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize
</UL>

<P><STRONG><a name="[168]"></a>ing2p4g_rst</STRONG> (Thumb, 98 bytes, Stack size 4 bytes, ing_2p4g.o(.text.ing2p4g_rst))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ing2p4g_rst
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm_2p4g_start
</UL>

<P><STRONG><a name="[1a8]"></a>_printf_core</STRONG> (Thumb, 996 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$8
</UL>

<P><STRONG><a name="[1aa]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1a9]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
